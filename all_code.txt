===== ALL CODE FROM DJANGO PROJECT =====
# This file contains every single line of code from the entire Django codebase
# Generated from the complete project structure

# ===== .env =====
# Environment variables configuration
DB_NAME=edplatform_db
DB_USER=postgres
DB_PASSWORD=your_password_here
DB_HOST=localhost
DB_PORT=5432
SECRET_KEY=django-insecure-your-secret-key-here
DEBUG=True
REDIS_URL=redis://localhost:6379/0
OPENROUTER_API_KEY=your_openrouter_api_key_here
OPENROUTER_SITE_URL=http://localhost:8000
OPENROUTER_SITE_NAME=EdPlatform

# c:\Users\ASUS\django-project\manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys

def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'edplatform.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()


# ===== edplatform\celery_app.py =====
import os
from celery_app import Celery

# Set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'edplatform.settings')

app = Celery('edplatform')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django apps.
app.autodiscover_tasks()

@app.task(bind=True, ignore_result=True)
def debug_task(self):
    print(f'Request: {self.request!r}')

# edplatform/__init__.py
from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery_app import app as celery_app

__all__ = ('celery_app',)

# ===== edplatform/settings.py =====
# c:\Users\ASUS\django-project\edplatform\settings.py
"""
Django settings for edplatform project.
Generated by 'django-admin startproject' using Django 5.2.3.
For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-yxfn$boiw2@i(n+js-o=(p58kxrj6n0*o)-5q1(^ba0yw+8m$e')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Application definition
INSTALLED_APPS = [
    'daphne',  # For WebSocket support
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',                # Added for allauth
    
    # Third-party apps
    'tailwind',
    'theme',
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'channels',
    
    # Local apps
    'users',
    'problems',
    'blogs',
    'submit',
    'mcq_generation',
    'learning_sessions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'allauth.account.middleware.AccountMiddleware', 
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

ROOT_URLCONF = 'edplatform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'edplatform.wsgi.application'
ASGI_APPLICATION = 'edplatform.asgi.application'

# With this SQLite configuration:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  AUTH CONFIG  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
AUTH_USER_MODEL = 'users.User'
SITE_ID = 1
REST_USE_JWT = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# Tailwind CSS
TAILWIND_APP_NAME = 'theme'
NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ allauth / login rules â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"
ACCOUNT_LOGIN_METHODS = {"email", "username"}
ACCOUNT_SIGNUP_FIELDS = ["username*", "email*", "password1*", "password2*"]
ACCOUNT_UNIQUE_EMAIL = True

# Celery Configuration
CELERY_BROKER_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Channels Configuration for WebSockets
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [os.getenv('REDIS_URL', 'redis://localhost:6379/0')],
        },
    },
}

# OpenRouter Configuration (instead of OpenAI)
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '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')
OPENROUTER_SITE_URL = os.getenv('OPENROUTER_SITE_URL', 'http://localhost:8000')
OPENROUTER_SITE_NAME = os.getenv('OPENROUTER_SITE_NAME', 'EdPlatform')

# Problem Types
PROBLEM_TYPES = [
    ('math', 'Mathematics'),
    ('dsa', 'Data Structures & Algorithms'),
]

# MCQ Generation Settings (Updated for Gemma)
MCQ_GENERATION_CONFIG = {
    'default_mcq_count': 3,
    'max_mcq_count': 5,
    'timeout_seconds': 30,
    'model': 'google/gemma-2-9b-it:free',
    'temperature': 0.7,
    'max_tokens': 2000,
}


# c:\Users\ASUS\django-project\edplatform\urls.py
"""
URL configuration for the *edplatform* project.

â€“  "Site" pages (HTML templates) are declared FIRST so they win the
   URL-resolver race against similarly-named API routes.
â€“  API endpoints live under /api/auth/ and come afterwards.
"""

from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import include, path
from django.views.generic import TemplateView
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    # 1)  Public / session-based HTML pages
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    path(
        "login/",
        auth_views.LoginView.as_view(template_name="login.html"),
        name="login",
    ),
    path(
        "logout/",
        auth_views.LogoutView.as_view(next_page="login"),
        name="logout",
    ),
    path(
        "signup/",
        TemplateView.as_view(template_name="signup.html"),
        name="signup",
    ),
    path(
        "home/",
        TemplateView.as_view(template_name="home.html"),
        name="home",
    ),
    path(
        "dashboard/",
        TemplateView.as_view(template_name="dashboard.html"),
        name="dashboard",
    ),
    # Root URL â†’ login page (feel free to change)
    path(
        "",
        auth_views.LoginView.as_view(template_name="login.html"),
        name="root",
    ),

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    # 2)  Feature-app URLConfs
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    path("problems/", include("problems.urls")),
    path("blogs/", include("blogs.urls")),
    path("learning-sessions/", include("learning_sessions.urls")),

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    # 3)  API  (dj-rest-auth / DRF)
    #     Kept AFTER site pages so names don't clash
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    path("api/auth/", include("dj_rest_auth.urls")),
    path("api/auth/registration/", include("dj_rest_auth.registration.urls")),
    path("api/problems/", include("problems.api_urls")),
    path("api/learning-sessions/", include("learning_sessions.api_urls")),

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    # 4)  Django Admin
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    path("admin/", admin.site.urls),
]

# Serve media files in development
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


# c:\Users\ASUS\django-project\edplatform\asgi.py
"""
ASGI config for edplatform project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os
from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
from channels.security.websocket import AllowedHostsOriginValidator
import learning_sessions.routing

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'edplatform.settings')

django_asgi_app = get_asgi_application()

application = ProtocolTypeRouter({
    "http": django_asgi_app,
    "websocket": AllowedHostsOriginValidator(
        AuthMiddlewareStack(
            URLRouter(
                learning_sessions.routing.websocket_urlpatterns
            )
        )
    ),
})


# ===== edplatform/wsgi.py =====
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'edplatform.settings')

application = get_wsgi_application()

# ===== users/__init__.py =====
# Empty file

# ===== users/apps.py =====
from django.apps import AppConfig

class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'

# c:\Users\ASUS\django-project\users\models.py
from django.contrib.auth.models import AbstractUser
from django.db import models
from django.utils.crypto import get_random_string

class User(AbstractUser):
    """
    â€“ email must stay unique
    â€“ username may be left blank by the registrant;
      we will auto-populate it right after the first save
    """
    email = models.EmailField(unique=True)

    username = models.CharField(
        max_length=150,
        unique=True,
        blank=True,          # user may omit it
        null=True,           # db allows NULL during first INSERT
    )

    USERNAME_FIELD = "email"        # users still log in by email OR username
    REQUIRED_FIELDS = ['username']  # createsuperuser asks only for email+pwd

    def save(self, *args, **kwargs):
        """
        Two-phase save:
        1) insert row â†’ pk generated
        2) if username is missing, set it to a slug based on pk
        """
        is_new = self.pk is None
        super().save(*args, **kwargs)          # phase-1: row exists, pk known

        if is_new and not self.username:       # phase-2: auto-fill once
            self.username = f"user_{self.pk}"
            # collision extremely unlikely, but guard anyway
            if User.objects.filter(username=self.username).exists():
                self.username = f"user_{self.pk}_{get_random_string(4)}"
            # save only that field to avoid recursion
            User.objects.filter(pk=self.pk).update(username=self.username)


# ===== users/admin.py =====
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import User

admin.site.register(User, UserAdmin)

# ===== users/views.py =====
from django.shortcuts import render

# Create your views here.

# ===== problems/__init__.py =====
# Empty file

# ===== problems/apps.py =====
from django.apps import AppConfig

class ProblemsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'problems'

# c:\Users\ASUS\django-project\problems\models.py


# c:\Users\ASUS\django-project\problems\models.py
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class Problem(models.Model):
    DIFFICULTY_CHOICES = [
        ('easy', 'Easy'),
        ('medium', 'Medium'),
        ('hard', 'Hard'),
    ]
    
    TYPE_CHOICES = [
        ('math', 'Mathematics'),
        ('dsa', 'Data Structures & Algorithms'),
    ]
    
    title = models.CharField(max_length=200)
    description = models.TextField()
    difficulty = models.CharField(max_length=50, choices=DIFFICULTY_CHOICES)
    problem_type = models.CharField(max_length=10, choices=TYPE_CHOICES, default='math')
    
    # File uploads
    image_file = models.ImageField(upload_to='problems/images/', blank=True, null=True)
    pdf_file = models.FileField(upload_to='problems/pdfs/', blank=True, null=True)
    
    # Problem content
    input_format = models.TextField(blank=True, help_text="Description of input format")
    output_format = models.TextField(blank=True, help_text="Description of output format")
    constraints = models.TextField(blank=True, help_text="Constraints for the problem")
    
    # Test cases
    sample_input = models.TextField(blank=True)
    sample_output = models.TextField(blank=True)
    
    # New fields for enhanced judging
    time_limit = models.IntegerField(default=5, help_text="Time limit in seconds")
    memory_limit = models.CharField(max_length=10, default="128m", help_text="Memory limit (e.g., 128m, 256m)")
    
    # Metadata
    created_by = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)
    
    # Analytics
    total_attempts = models.IntegerField(default=0)
    successful_completions = models.IntegerField(default=0)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.title} ({self.get_difficulty_display()})"
    
    @property
    def success_rate(self):
        if self.total_attempts == 0:
            return 0
        return (self.successful_completions / self.total_attempts) * 100

class TestCase(models.Model):
    """Individual test cases for problems"""
    problem = models.ForeignKey(Problem, on_delete=models.CASCADE, related_name='test_cases')
    input_data = models.TextField(help_text="Input for this test case")
    expected_output = models.TextField(help_text="Expected output for this test case")
    is_sample = models.BooleanField(default=False, help_text="Whether this is a sample test case")
    is_hidden = models.BooleanField(default=True, help_text="Whether this test case is hidden from users")
    points = models.IntegerField(default=1, help_text="Points awarded for passing this test case")
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['id']
        
    def __str__(self):
        return f"{self.problem.title} - Test Case {self.id}"



# c:\Users\ASUS\django-project\problems\admin.py
from django.contrib import admin
from .models import Problem

@admin.register(Problem)
class ProblemAdmin(admin.ModelAdmin):
    list_display = ['title', 'problem_type', 'difficulty', 'is_active', 'created_at']
    list_filter = ['problem_type', 'difficulty', 'is_active']
    search_fields = ['title', 'description']
    readonly_fields = ['created_at', 'updated_at', 'total_attempts', 'successful_completions']
    fieldsets = (
        (None, {
            'fields': ('title', 'description', 'problem_type', 'difficulty')
        }),
        ('Content', {
            'fields': ('input_format', 'output_format', 'constraints', 'sample_input', 'sample_output')
        }),
        ('Files', {
            'fields': ('image_file', 'pdf_file')
        }),
        ('Metadata', {
            'fields': ('created_by', 'is_active', 'created_at', 'updated_at')
        }),
        ('Analytics', {
            'fields': ('total_attempts', 'successful_completions')
        }),
    )


# c:\Users\ASUS\django-project\problems\views.py
from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse, JsonResponse
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator
from .models import Problem

def problem_list(request):
    """Display list of problems with filtering"""
    problem_type = request.GET.get('type', 'all')
    difficulty = request.GET.get('difficulty', 'all')
    
    problems = Problem.objects.filter(is_active=True)
    
    if problem_type != 'all':
        problems = problems.filter(problem_type=problem_type)
    
    if difficulty != 'all':
        problems = problems.filter(difficulty=difficulty)
    
    # Pagination
    paginator = Paginator(problems, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'current_type': problem_type,
        'current_difficulty': difficulty,
        'type_choices': Problem.TYPE_CHOICES,
        'difficulty_choices': Problem.DIFFICULTY_CHOICES,
    }
    
    return render(request, 'problems/problem_list.html', context)

def problem_detail(request, pk):
    """Display detailed view of a problem"""
    problem = get_object_or_404(Problem, pk=pk, is_active=True)
    return render(request, 'problems/problem_detail.html', {'problem': problem})

@login_required
def problem_create(request):
    """Create a new problem (placeholder for now)"""
    if request.method == 'POST':
        # This would handle problem creation
        return HttpResponse("Problem creation functionality coming soon!")
    
    return render(request, 'problems/problem_create.html')


# ===== problems/urls.py =====
from django.urls import path
from . import views

app_name = 'problems'

urlpatterns = [
    path('', views.problem_list, name='problem_list'),
    path('<int:pk>/', views.problem_detail, name='problem_detail'),
    path('create/', views.problem_create, name='problem_create'),
]

# ===== problems/api_urls.py =====
from django.urls import path
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Problem

@api_view(['GET'])
def problem_list_api(request):
    """API endpoint to get problems filtered by type"""
    problem_type = request.GET.get('type', None)
    
    problems = Problem.objects.filter(is_active=True)
    if problem_type:
        problems = problems.filter(problem_type=problem_type)
    
    data = []
    for problem in problems:
        data.append({
            'id': problem.id,
            'title': problem.title,
            'description': problem.description,
            'difficulty': problem.difficulty,
            'problem_type': problem.problem_type,
            'success_rate': problem.success_rate,
            'total_attempts': problem.total_attempts,
        })
    
    return Response(data)

urlpatterns = [
    path('', problem_list_api, name='problem_list_api'),
]

# ===== blogs/__init__.py =====
# Empty file

# ===== blogs/apps.py =====
from django.apps import AppConfig

class BlogsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'blogs'

# ===== blogs/models.py =====
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class BlogPost(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    published_date = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.title

# ===== blogs/admin.py =====
from django.contrib import admin
from .models import BlogPost

admin.site.register(BlogPost)

# ===== blogs/views.py =====
from django.shortcuts import render
from .models import BlogPost

def blog_post_list(request):
    posts = BlogPost.objects.all()
    return render(request, 'blogs/blog_post_list.html', {'posts': posts})

def blog_post_detail(request, pk):
    post = BlogPost.objects.get(pk=pk)
    return render(request, 'blogs/blog_post_detail.html', {'post': post})

# Create your views here.

# ===== blogs/urls.py =====
from django.urls import path
from . import views

urlpatterns = [
    path('', views.blog_post_list, name='blog_post_list'),
    path('<int:pk>/', views.blog_post_detail, name='blog_post_detail'),
]

# ===== submit/__init__.py =====
# Empty file

# ===== submit/apps.py =====
from django.apps import AppConfig

class SubmitConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'submit'




# c:\Users\ASUS\django-project\submit\models.py




# c:\Users\ASUS\django-project\submit\models.py
from django.db import models
from django.contrib.auth import get_user_model
from problems.models import Problem, TestCase

User = get_user_model()

class Submission(models.Model):
    STATUS_CHOICES = [
        ('PENDING', 'Pending'),
        ('JUDGING', 'Judging'),
        ('ACCEPTED', 'Accepted'),
        ('WRONG_ANSWER', 'Wrong Answer'),
        ('TIME_LIMIT_EXCEEDED', 'Time Limit Exceeded'),
        ('MEMORY_LIMIT_EXCEEDED', 'Memory Limit Exceeded'),
        ('RUNTIME_ERROR', 'Runtime Error'),
        ('COMPILATION_ERROR', 'Compilation Error'),
        ('ERROR', 'System Error'),
    ]
    
    LANGUAGE_CHOICES = [
        ('cpp', 'C++'),
        ('py', 'Python'),
        ('java', 'Java'),
    ]
    
    # Relations
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    problem = models.ForeignKey(Problem, on_delete=models.CASCADE)
    
    # Submission data
    code = models.TextField()
    language = models.CharField(max_length=50, choices=LANGUAGE_CHOICES)
    input_data = models.TextField(blank=True, null=True)
    
    # Enhanced results
    total_test_cases = models.IntegerField(default=0)
    passed_test_cases = models.IntegerField(default=0)
    score = models.FloatField(default=0.0, help_text="Score based on passed test cases")
    max_execution_time = models.FloatField(null=True, blank=True)
    max_memory_used = models.BigIntegerField(null=True, blank=True, help_text="Memory in bytes")
    
    output_data = models.TextField(blank=True, null=True)
    error_data = models.TextField(blank=True, null=True)
    status = models.CharField(max_length=50, choices=STATUS_CHOICES, default='PENDING')
    
    # Timing
    execution_time = models.FloatField(null=True, blank=True, help_text="Execution time in seconds")
    submitted_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-submitted_at']

    def __str__(self):
        user_display = self.user.username if self.user else "Anonymous"
        return f"{user_display} - {self.problem.title} - {self.status}"

class TestCaseResult(models.Model):
    """Results for individual test cases"""
    submission = models.ForeignKey(Submission, on_delete=models.CASCADE, related_name='test_results')
    test_case = models.ForeignKey(TestCase, on_delete=models.CASCADE)
    status = models.CharField(max_length=50, choices=Submission.STATUS_CHOICES)
    execution_time = models.FloatField(null=True, blank=True)
    memory_used = models.BigIntegerField(null=True, blank=True)
    actual_output = models.TextField(blank=True)
    error_message = models.TextField(blank=True)
    
    class Meta:
        unique_together = ['submission', 'test_case']
        
    def __str__(self):
        return f"{self.submission} - {self.test_case} - {self.status}"





# c:\Users\ASUS\django-project\submit\admin.py
from django.contrib import admin
from .models import Submission

@admin.register(Submission)
class SubmissionAdmin(admin.ModelAdmin):
    list_display = ['user', 'problem', 'language', 'status', 'submitted_at']
    list_filter = ['status', 'language', 'submitted_at']
    search_fields = ['user__username', 'problem__title']
    readonly_fields = ['submitted_at', 'execution_time']
    
    fieldsets = (
        (None, {
            'fields': ('user', 'problem', 'language', 'status')
        }),
        ('Code', {
            'fields': ('code', 'input_data')
        }),
        ('Results', {
            'fields': ('output_data', 'error_data', 'execution_time')
        }),
        ('Metadata', {
            'fields': ('submitted_at',)
        }),
    )

# c:\Users\ASUS\django-project\submit\forms.py
from django import forms
from .models import Submission

class CodeSubmissionForm(forms.ModelForm):
    class Meta:
        model = Submission
        fields = ["problem", "language", "code", "input_data"]
        widgets = {
            'code': forms.Textarea(attrs={
                'rows': 20,
                'class': 'form-control font-monospace',
                'placeholder': 'Enter your code here...'
            }),
            'input_data': forms.Textarea(attrs={
                'rows': 5,
                'class': 'form-control font-monospace',
                'placeholder': 'Enter test input (optional)...'
            }),
            'language': forms.Select(attrs={'class': 'form-select'}),
            'problem': forms.Select(attrs={'class': 'form-select'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Filter to show only active problems
        self.fields['problem'].queryset = self.fields['problem'].queryset.filter(is_active=True)

# c:\Users\ASUS\django-project\submit\utils.py
"""
Helper that compiles / runs source code for C++, Python or Java
without any containerisation. Returns a dict with:
    status âˆˆ {"OK", "COMPILATION_ERROR", "RUNTIME_ERROR", "TIMEOUT", "ERROR"}
    stdout â€“ program output
    stderr â€“ compiler / run-time diagnostics
    execution_time â€“ time taken to execute
"""

import subprocess
import tempfile
import time
from pathlib import Path

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Language configuration table
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
LANGS = {
    # ---------- C++ (g++) ----------
    "cpp": {
        "ext": ".cpp",
        "compile": lambda src, exe: [
            "g++", src, "-O2", "-pipe", "-static", "-s", "-o", exe
        ],
        "run": lambda exe, _src, _tmp: [exe],
    },
    # ---------- Python 3 ----------
    "py": {
        "ext": ".py",
        "compile": None,                                        # nothing to compile
        "run": lambda _exe, src, _tmp: ["python3", "-u", src],  # -u = unbuffered
    },
    # ---------- Java (JDK â‰¥ 8) ----------
    # Assumes learner's public class is called `Main`
    "java": {
        "ext": ".java",
        "compile": lambda src, _exe: ["javac", src],                 # javac drops .class next to .java
        "run": lambda _exe, _src, tmp: ["java", "-cp", str(tmp), "Main"],
    },
}

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Core execution function
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def run_code(language: str, code: str, input_data: str, timeout: int = 5):
    """
    Execute `code` written in `language` with `input_data` on stdin.

    Returns:
        dict(status, stdout, stderr, execution_time)
    """
    lang = LANGS.get(language)
    if lang is None:
        return {
            "status": "ERROR",
            "stdout": "",
            "stderr": f"Unsupported language: {language}",
            "execution_time": 0,
        }

    start_time = time.time()

    # Fresh temp directory per submission; automatically deleted afterwards
    with tempfile.TemporaryDirectory(prefix="run_") as tmpdir:
        tmp_path = Path(tmpdir)
        src = tmp_path / f"Main{lang['ext']}"
        exe = tmp_path / "main"                       # used only for C++

        src.write_text(code, encoding="utf-8")

        # -------- compile (if needed) --------
        if lang["compile"]:
            compile_cmd = lang["compile"](str(src), str(exe))
            comp = subprocess.run(
                compile_cmd, capture_output=True, text=True
            )
            if comp.returncode != 0:
                return {
                    "status": "COMPILATION_ERROR",
                    "stdout": comp.stdout,
                    "stderr": comp.stderr,
                    "execution_time": time.time() - start_time,
                }

        # -------- execute --------
        run_cmd = lang["run"](str(exe), str(src), tmp_path)
        try:
            execution_start = time.time()
            run = subprocess.run(
                run_cmd,
                input=input_data,
                capture_output=True,
                text=True,
                timeout=timeout,
            )
            execution_time = time.time() - execution_start
            
            status = "OK" if run.returncode == 0 else "RUNTIME_ERROR"
            return {
                "status": status,
                "stdout": run.stdout,
                "stderr": run.stderr,
                "execution_time": execution_time,
            }
        except subprocess.TimeoutExpired as e:
            return {
                "status": "TIMEOUT",
                "stdout": e.stdout or "",
                "stderr": e.stderr or "",
                "execution_time": timeout,
            }
        except Exception as e:
            return {
                "status": "ERROR",
                "stdout": "",
                "stderr": str(e),
                "execution_time": time.time() - start_time,
            }


# c:\Users\ASUS\django-project\submit\views.py



from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from .models import Submission
from .forms import CodeSubmissionForm
from .judge import JudgeService
from problems.models import Problem
import json

@login_required
def submit(request):
    """Enhanced submission view with comprehensive judging"""
    if request.method == "POST":
        form = CodeSubmissionForm(request.POST)
        if not form.is_valid():
            return render(request, "submit/index.html", {"form": form})

        # Create submission
        submission = form.save(commit=False)
        submission.user = request.user
        submission.save()
        
        # Judge submission
        judge = JudgeService()
        result = judge.judge_submission(submission)
        
        return render(request, "submit/result.html", {
            "submission": submission,
            "result": result
        })

    return render(request, "submit/index.html", {"form": CodeSubmissionForm()})

@csrf_exempt
@require_http_methods(["POST"])
def submit_api(request):
    """API endpoint for code submission with enhanced judging"""
    try:
        data = json.loads(request.body)
        
        # Validate required fields
        required_fields = ['problem_id', 'language', 'code']
        for field in required_fields:
            if field not in data:
                return JsonResponse({'error': f'Missing field: {field}'}, status=400)
                
        # Get problem
        try:
            problem = Problem.objects.get(id=data['problem_id'])
        except Problem.DoesNotExist:
            return JsonResponse({'error': 'Problem not found'}, status=404)
            
        # Create submission
        submission = Submission.objects.create(
            user=request.user if request.user.is_authenticated else None,
            problem=problem,
            language=data['language'],
            code=data['code']
        )
        
        # Judge submission
        judge = JudgeService()
        result = judge.judge_submission(submission)
        
        return JsonResponse({
            'submission_id': submission.id,
            'status': submission.status,
            'score': submission.score,
            'passed_tests': submission.passed_test_cases,
            'total_tests': submission.total_test_cases,
            'max_execution_time': submission.max_execution_time,
            'max_memory_used': submission.max_memory_used,
            'result': result
        })
        
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)




# ===== mcq_generation/__init__.py =====
# Empty file

# c:\Users\ASUS\django-project\mcq_generation\apps.py
from django.apps import AppConfig

class McqGenerationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'mcq_generation'
    verbose_name = 'MCQ Generation'


# c:\Users\ASUS\django-project\mcq_generation\models.py
from django.db import models
from django.contrib.auth import get_user_model
from problems.models import Problem

User = get_user_model()

class MCQSet(models.Model):
    """Represents a set of MCQs generated for a specific problem"""
    problem = models.ForeignKey(Problem, on_delete=models.CASCADE)
    generated_at = models.DateTimeField(auto_now_add=True)
    total_questions = models.IntegerField(default=0)
    is_active = models.BooleanField(default=True)
    
    class Meta:
        ordering = ['-generated_at']
    
    def __str__(self):
        return f"MCQ Set for {self.problem.title}"

class MCQ(models.Model):
    """Individual Multiple Choice Question"""
    mcq_set = models.ForeignKey(MCQSet, on_delete=models.CASCADE, related_name='questions')
    question_text = models.TextField()
    option_a = models.CharField(max_length=500)
    option_b = models.CharField(max_length=500)
    option_c = models.CharField(max_length=500)
    option_d = models.CharField(max_length=500)
    correct_answer = models.CharField(max_length=1, choices=[
        ('A', 'Option A'),
        ('B', 'Option B'),
        ('C', 'Option C'),
        ('D', 'Option D'),
    ])
    explanation = models.TextField()
    sequence_order = models.IntegerField()
    difficulty_level = models.CharField(max_length=20, default='medium')
    
    # Hint system
    hint_text = models.TextField(blank=True, help_text="Hint to guide learner thinking")
    
    class Meta:
        ordering = ['sequence_order']
        unique_together = ['mcq_set', 'sequence_order']
    
    def __str__(self):
        return f"MCQ {self.sequence_order}: {self.question_text[:50]}..."

class MCQResponse(models.Model):
    """User's response to an MCQ"""
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    mcq = models.ForeignKey(MCQ, on_delete=models.CASCADE)
    learning_session = models.ForeignKey('learning_sessions.LearningSession', on_delete=models.CASCADE)
    selected_answer = models.CharField(max_length=1, choices=[
        ('A', 'Option A'),
        ('B', 'Option B'),
        ('C', 'Option C'),
        ('D', 'Option D'),
    ])
    is_correct = models.BooleanField()
    time_taken_seconds = models.IntegerField(help_text="Time taken to answer in seconds")
    attempted_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['user', 'mcq', 'learning_session']
    
    def __str__(self):
        return f"{self.user.username} - MCQ {self.mcq.sequence_order} - {'âœ“' if self.is_correct else 'âœ—'}"

# c:\Users\ASUS\django-project\mcq_generation\services.py

"""
LLM service for generating MCQs using OpenRouter API with Gemma
"""
import json
import requests
from django.conf import settings
from typing import List, Dict, Optional
from .models import MCQSet, MCQ
from problems.models import Problem

class MCQGenerationService:
    """Service for generating MCQs using OpenRouter API with Gemma"""
    
    def __init__(self):
        self.api_key = settings.OPENROUTER_API_KEY
        self.model = settings.MCQ_GENERATION_CONFIG['model']
        self.temperature = settings.MCQ_GENERATION_CONFIG['temperature']
        self.max_tokens = settings.MCQ_GENERATION_CONFIG['max_tokens']
        self.site_url = settings.OPENROUTER_SITE_URL
        self.site_name = settings.OPENROUTER_SITE_NAME
        self.api_url = "https://openrouter.ai/api/v1/chat/completions"
        
    def generate_mcqs_for_problem(self, problem: Problem, num_questions: int = 3) -> MCQSet:
        """Generate MCQs for a given problem using OpenRouter API"""
        
        # Create the messages for the API call
        messages = [
            {"role": "system", "content": self._get_system_prompt()},
            {"role": "user", "content": self._create_mcq_prompt(problem, num_questions)}
        ]
        
        try:
            # Make API call to OpenRouter
            response = self._make_api_call(messages)
            
            # Parse response
            mcq_data = self._parse_response(response)
            
            # Create MCQSet and MCQs
            mcq_set = self._create_mcq_set(problem, mcq_data)
            
            return mcq_set
            
        except Exception as e:
            raise Exception(f"Failed to generate MCQs: {str(e)}")
    
    def _make_api_call(self, messages: List[Dict]) -> Dict:
        """Make the actual API call to OpenRouter"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": self.site_url,
            "X-Title": self.site_name,
        }
        
        payload = {
            "model": self.model,
            "messages": messages,
            "temperature": self.temperature,
            "max_tokens": self.max_tokens,
        }
        
        response = requests.post(
            url=self.api_url,
            headers=headers,
            data=json.dumps(payload),
            timeout=30
        )
        
        if response.status_code != 200:
            raise Exception(f"API call failed: {response.status_code} - {response.text}")
        
        return response.json()
    
    def _parse_response(self, response: Dict) -> Dict:
        """Parse the API response and extract MCQ data"""
        try:
            content = response['choices'][0]['message']['content']
            
            # Try to extract JSON from the response
            # Gemma might return JSON wrapped in markdown code blocks
            if '``````' in content:
                # Extract JSON from markdown code block
                start = content.find('```', 0)
                end = content.find('```', start)
                json_str = content[start:end].strip()
            elif '{' in content and '}' in content:
                # Try to find JSON object in the content
                start = content.find('{')
                end = content.rfind('}') + 1
                json_str = content[start:end]
            else:
                json_str = content
            
            mcq_data = json.loads(json_str)
            
            # Validate the structure
            if 'mcqs' not in mcq_data:
                raise ValueError("Response missing 'mcqs' key")
            
            return mcq_data
            
        except (KeyError, json.JSONDecodeError, ValueError) as e:
            raise Exception(f"Failed to parse API response: {str(e)}")
    
    def _get_system_prompt(self) -> str:
        """System prompt for MCQ generation optimized for Gemma"""
        return """You are an expert educational content creator specializing in Mathematics and Data Structures & Algorithms. 

Your task is to create a sequence of carefully-designed multiple-choice questions (MCQs) that guide learners toward solving a problem through Socratic questioning, rather than revealing the answer directly.

Key principles:
1. Start with conceptual understanding questions
2. Progress to strategy-identification questions  
3. End with implementation-specific questions
4. Each MCQ should build upon the previous one
5. Focus on developing problem-solving skills, not memorization
6. Provide clear, educational explanations
7. Include helpful hints when appropriate

IMPORTANT: You must return your response as valid JSON only. Do not include any markdown formatting or additional text outside the JSON.

Required JSON schema:
{
  "mcqs": [
    {
      "question_text": "The question text",
      "option_a": "First option", 
      "option_b": "Second option",
      "option_c": "Third option", 
      "option_d": "Fourth option",
      "correct_answer": "A",
      "explanation": "Detailed explanation of why this answer is correct",
      "hint_text": "Optional hint to guide thinking",
      "difficulty_level": "easy",
      "sequence_order": 1
    }
  ]
}

The correct_answer must be exactly one of: "A", "B", "C", or "D"
The difficulty_level must be one of: "easy", "medium", or "hard"
The sequence_order should start from 1 and increment for each question."""
    
    def _create_mcq_prompt(self, problem: Problem, num_questions: int) -> str:
        """Create the user prompt for MCQ generation"""
        
        prompt = f"""Generate exactly {num_questions} MCQs for this problem:

**Problem Title:** {problem.title}
**Problem Type:** {problem.get_problem_type_display()}
**Difficulty:** {problem.get_difficulty_display()}
**Description:** {problem.description}
"""
        
        if problem.input_format:
            prompt += f"\n**Input Format:** {problem.input_format}"
        if problem.output_format:
            prompt += f"\n**Output Format:** {problem.output_format}"
        if problem.constraints:
            prompt += f"\n**Constraints:** {problem.constraints}"
        if problem.sample_input and problem.sample_output:
            prompt += f"\n**Sample Input:** {problem.sample_input}"
            prompt += f"\n**Sample Output:** {problem.sample_output}"
        
        prompt += f"""

Create {num_questions} MCQs that follow this learning progression:
1. First MCQ: Test conceptual understanding of the problem domain
2. Middle MCQs: Guide toward identifying the right approach/algorithm
3. Final MCQ: Focus on implementation details or edge cases

Requirements for each MCQ:
- Exactly 4 options (A, B, C, D)
- One clearly correct answer
- Educational explanations that teach, not just verify
- Helpful hints that encourage critical thinking
- Appropriate difficulty for {problem.get_difficulty_display()} level

Return only valid JSON matching the required schema. No additional text or formatting."""
        
        return prompt
    
    def _create_mcq_set(self, problem: Problem, mcq_data: Dict) -> MCQSet:
        """Create MCQSet and MCQ objects from API response"""
        
        # Create MCQSet
        mcq_set = MCQSet.objects.create(
            problem=problem,
            total_questions=len(mcq_data['mcqs'])
        )
        
        # Create individual MCQs
        for mcq_info in mcq_data['mcqs']:
            # Validate and clean the data
            correct_answer = mcq_info.get('correct_answer', 'A').upper()
            if correct_answer not in ['A', 'B', 'C', 'D']:
                correct_answer = 'A'  # Default fallback
            
            difficulty_level = mcq_info.get('difficulty_level', 'medium').lower()
            if difficulty_level not in ['easy', 'medium', 'hard']:
                difficulty_level = 'medium'  # Default fallback
            
            MCQ.objects.create(
                mcq_set=mcq_set,
                question_text=mcq_info.get('question_text', ''),
                option_a=mcq_info.get('option_a', ''),
                option_b=mcq_info.get('option_b', ''),
                option_c=mcq_info.get('option_c', ''),
                option_d=mcq_info.get('option_d', ''),
                correct_answer=correct_answer,
                explanation=mcq_info.get('explanation', ''),
                hint_text=mcq_info.get('hint_text', ''),
                difficulty_level=difficulty_level,
                sequence_order=mcq_info.get('sequence_order', 1)
            )
        
        return mcq_set


# c:\Users\ASUS\django-project\mcq_generation\tasks.py
"""
Celery tasks for asynchronous MCQ generation using OpenRouter API
"""
from celery import shared_task
from django.utils import timezone
from .services import MCQGenerationService
from .models import MCQSet
from problems.models import Problem
import logging

logger = logging.getLogger(__name__)

@shared_task(bind=True, max_retries=3)
def generate_mcqs_async(self, problem_id: int, num_questions: int = 3):
    """
    Asynchronously generate MCQs for a problem using OpenRouter API
    """
    try:
        problem = Problem.objects.get(id=problem_id)
        service = MCQGenerationService()
        
        logger.info(f"Starting MCQ generation for problem {problem_id} using Gemma")
        
        mcq_set = service.generate_mcqs_for_problem(problem, num_questions)
        
        logger.info(f"Successfully generated {mcq_set.total_questions} MCQs for problem {problem_id}")
        
        return {
            'success': True,
            'mcq_set_id': mcq_set.id,
            'total_questions': mcq_set.total_questions,
            'generated_at': mcq_set.generated_at.isoformat(),
            'model_used': 'google/gemma-2-9b-it:free'
        }
        
    except Problem.DoesNotExist:
        logger.error(f"Problem {problem_id} not found")
        return {'success': False, 'error': 'Problem not found'}
    except Exception as exc:
        logger.error(f"MCQ generation failed for problem {problem_id}: {str(exc)}")
        
        # Retry logic
        if self.request.retries < self.max_retries:
            countdown = 60 * (2 ** self.request.retries)  # Exponential backoff
            logger.info(f"Retrying MCQ generation in {countdown} seconds (attempt {self.request.retries + 1})")
            raise self.retry(countdown=countdown, exc=exc)
        
        return {
            'success': False,
            'error': str(exc),
            'retries_exhausted': True
        }


# c:\Users\ASUS\django-project\mcq_generation\urls.py
from django.urls import path
from . import views

app_name = 'mcq_generation'

urlpatterns = [
    # Add any direct MCQ generation URLs here if needed
]


# c:\Users\ASUS\django-project\mcq_generation\admin.py
from django.contrib import admin
from .models import MCQSet, MCQ, MCQResponse

@admin.register(MCQSet)
class MCQSetAdmin(admin.ModelAdmin):
    list_display = ['problem', 'total_questions', 'generated_at', 'is_active']
    list_filter = ['is_active', 'generated_at']
    search_fields = ['problem__title']
    readonly_fields = ['generated_at']

@admin.register(MCQ)
class MCQAdmin(admin.ModelAdmin):
    list_display = ['mcq_set', 'sequence_order', 'question_text_short', 'correct_answer', 'difficulty_level']
    list_filter = ['difficulty_level', 'correct_answer']
    search_fields = ['question_text', 'mcq_set__problem__title']
    ordering = ['mcq_set', 'sequence_order']
    
    def question_text_short(self, obj):
        return obj.question_text[:50] + "..." if len(obj.question_text) > 50 else obj.question_text
    question_text_short.short_description = 'Question'

@admin.register(MCQResponse)
class MCQResponseAdmin(admin.ModelAdmin):
    list_display = ['user', 'mcq_short', 'selected_answer', 'is_correct', 'time_taken_seconds', 'attempted_at']
    list_filter = ['is_correct', 'selected_answer', 'attempted_at']
    search_fields = ['user__username', 'mcq__question_text']
    readonly_fields = ['attempted_at']
    
    def mcq_short(self, obj):
        return f"{obj.mcq.mcq_set.problem.title} - Q{obj.mcq.sequence_order}"
    mcq_short.short_description = 'MCQ'



# ===== learning_sessions/__init__.py =====
# Empty file

# ===== learning_sessions/apps.py =====
from django.apps import AppConfig

class LearningSessionsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'learning_sessions'

# ===== learning_sessions/models.py =====
from django.db import models
from django.contrib.auth import get_user_model
from problems.models import Problem
from mcq_generation.models import MCQSet

User = get_user_model()

class LearningSession(models.Model):
    """Tracks a user's learning session for a specific problem"""
    
    STATUS_CHOICES = [
        ('started', 'Started'),
        ('mcq_generation', 'Generating MCQs'),
        ('mcq_ready', 'MCQs Ready'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    problem = models.ForeignKey(Problem, on_delete=models.CASCADE)
    mcq_set = models.ForeignKey(MCQSet, on_delete=models.SET_NULL, null=True, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='started')
    
    # MCQ tracking
    current_mcq_index = models.PositiveIntegerField(default=0)
    total_mcqs = models.PositiveIntegerField(default=0)
    correct_answers = models.PositiveIntegerField(default=0)
    
    # Timestamps
    started_at = models.DateTimeField(auto_now_add=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    
    def __str__(self):
        return f"{self.user.username} - {self.problem.title} - {self.status}"
    
    @property
    def accuracy(self):
        if self.total_mcqs == 0:
            return 0
        return (self.correct_answers / self.total_mcqs) * 100
    
    @property
    def is_completed(self):
        return self.status == 'completed'
    
    class Meta:
        ordering = ['-started_at']
        unique_together = ['user', 'problem']  # One session per user per problem


# ===== learning_sessions/admin.py =====

from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework import status
import json

from problems.models import Problem
from mcq_generation.models import MCQ, MCQResponse, MCQSet
from mcq_generation.tasks import generate_mcqs_async
from .models import LearningSession

@login_required
def start_learning_session(request, problem_id):
    """Start a new learning session for a problem"""
    problem = get_object_or_404(Problem, id=problem_id)
    
    # Get or create learning session
    session, created = LearningSession.objects.get_or_create(
        user=request.user,
        problem=problem,
        defaults={'status': 'started'}
    )
    
    if created or session.status == 'failed':
        # Start MCQ generation
        session.status = 'mcq_generation'
        session.save()
        
        # Trigger async MCQ generation
        generate_mcqs_async.delay(problem.id)
    
    return render(request, 'learning_sessions/session_interface.html', {
        'session': session,
        'problem': problem
    })

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def session_status(request, session_id):
    """Get the current status of a learning session"""
    try:
        session = LearningSession.objects.get(id=session_id, user=request.user)
        
        data = {
            'id': session.id,
            'status': session.status,
            'current_mcq_index': session.current_mcq_index,
            'total_mcqs': session.total_mcqs,
            'correct_answers': session.correct_answers,
            'accuracy': session.accuracy,
        }
        
        # If MCQs are ready, include the current MCQ
        if session.status in ['mcq_ready', 'in_progress'] and session.mcq_set:
            mcqs = session.mcq_set.questions.all().order_by('sequence_order')
            if session.current_mcq_index < len(mcqs):
                current_mcq = mcqs[session.current_mcq_index]
                data['current_mcq'] = {
                    'id': current_mcq.id,
                    'question_text': current_mcq.question_text,  # FIX: was 'question'
                    'option_a': current_mcq.option_a,
                    'option_b': current_mcq.option_b,
                    'option_c': current_mcq.option_c,
                    'option_d': current_mcq.option_d,
                    'hint_text': current_mcq.hint_text,          # FIX: was 'hint'
                }
        
        return Response(data)
        
    except LearningSession.DoesNotExist:
        return Response(
            {'error': 'Session not found'}, 
            status=status.HTTP_404_NOT_FOUND
        )

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def submit_mcq_answer(request, session_id):
    """Submit an answer to the current MCQ"""
    try:
        session = LearningSession.objects.get(id=session_id, user=request.user)
        
        if session.status not in ['in_progress', 'mcq_ready']:
            return Response(
                {'error': 'Session is not in progress'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        selected_answer = request.data.get('selected_answer')
        time_taken = request.data.get('time_taken_seconds', 0)
        
        if not selected_answer or selected_answer not in ['A', 'B', 'C', 'D']:
            return Response(
                {'error': 'Invalid answer'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Get current MCQ
        mcqs = session.mcq_set.questions.all().order_by('sequence_order')
        if session.current_mcq_index >= len(mcqs):
            return Response(
                {'error': 'No more MCQs'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        current_mcq = mcqs[session.current_mcq_index]
        is_correct = selected_answer == current_mcq.correct_answer
        
        # Save the response
        MCQResponse.objects.create(
            user=request.user,
            mcq=current_mcq,
            learning_session=session,
            selected_answer=selected_answer,
            is_correct=is_correct,
            time_taken_seconds=time_taken
        )
        
        # Update session
        if is_correct:
            session.correct_answers += 1
        
        session.current_mcq_index += 1
        
        # Update status if first MCQ
        if session.status == 'mcq_ready':
            session.status = 'in_progress'
        
        # Check if session is completed
        if session.current_mcq_index >= len(mcqs):
            session.status = 'completed'
            session.completed_at = timezone.now()
        
        session.save()
        
        response_data = {
            'is_correct': is_correct,
            'correct_answer': current_mcq.correct_answer,
            'explanation': current_mcq.explanation,
            'session_complete': session.status == 'completed',
            'current_accuracy': session.accuracy,
        }
        
        # If there's a next MCQ, include it
        if session.current_mcq_index < len(mcqs):
            next_mcq = mcqs[session.current_mcq_index]
            response_data['next_mcq'] = {
                'id': next_mcq.id,
                'question_text': next_mcq.question_text,
                'option_a': next_mcq.option_a,
                'option_b': next_mcq.option_b,
                'option_c': next_mcq.option_c,
                'option_d': next_mcq.option_d,
                'hint_text': next_mcq.hint_text,
            }
        
        return Response(response_data)
        
    except LearningSession.DoesNotExist:
        return Response(
            {'error': 'Session not found'}, 
            status=status.HTTP_404_NOT_FOUND
        )

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def complete_session(request, session_id):
    """Mark a learning session as completed"""
    try:
        session = LearningSession.objects.get(id=session_id, user=request.user)
        
        session.status = 'completed'
        session.completed_at = timezone.now()
        session.save()
        
        # Update problem analytics
        session.problem.total_attempts += 1
        if session.accuracy >= 70:  # Consider 70%+ as successful completion
            session.problem.successful_completions += 1
        session.problem.save()
        
        return Response({
            'message': 'Session completed successfully',
            'accuracy': session.accuracy,
            'correct_answers': session.correct_answers,
            'total_mcqs': session.total_mcqs,
        })
        
    except LearningSession.DoesNotExist:
        return Response(
            {'error': 'Session not found'}, 
            status=status.HTTP_404_NOT_FOUND
        )




# c:\Users\ASUS\django-project\learning_sessions\admin.py


from django.contrib import admin
from .models import LearningSession

@admin.register(LearningSession)
class LearningSessionAdmin(admin.ModelAdmin):
    list_display = ['user', 'problem', 'status', 'accuracy_percentage', 'started_at', 'completed_at']
    list_filter = ['status', 'started_at', 'completed_at']
    search_fields = ['user__username', 'problem__title']
    readonly_fields = ['started_at', 'completed_at']  # FIX: Removed non-existent fields
    
    fieldsets = (
        (None, {
            'fields': ('user', 'problem', 'mcq_set', 'status')
        }),
        ('Progress', {
            'fields': ('current_mcq_index', 'total_mcqs', 'correct_answers')  # FIX: Removed non-existent fields
        }),
        ('Timestamps', {
            'fields': ('started_at', 'completed_at')  # FIX: Removed non-existent fields
        }),
    )
    
    def accuracy_percentage(self, obj):
        return f"{obj.accuracy:.1f}%"  # FIX: use obj.accuracy property
    accuracy_percentage.short_description = 'Accuracy'




# ===== learning_sessions/urls.py =====


from django.urls import path
from . import views

urlpatterns = [
    path('start/<int:problem_id>/', views.start_learning_session, name='start_learning_session'),
]

# ===== learning_sessions/api_urls.py =====
from django.urls import path
from . import views

urlpatterns = [
    path('<int:session_id>/status/', views.session_status, name='session_status'),
    path('<int:session_id>/submit-answer/', views.submit_mcq_answer, name='submit_mcq_answer'),
    path('<int:session_id>/complete/', views.complete_session, name='complete_session'),
]

# ===== learning_sessions/consumers.py =====



import json
import asyncio
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.contrib.auth import get_user_model
from .models import LearningSession
from mcq_generation.models import MCQSet

User = get_user_model()

class LearningSessionConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.session_id = self.scope['url_route']['kwargs']['session_id']
        self.session_group_name = f'learning_session_{self.session_id}'
        
        # Join session group
        await self.channel_layer.group_add(
            self.session_group_name,
            self.channel_name
        )
        
        await self.accept()
        
        # Start checking for MCQ generation completion
        asyncio.create_task(self.check_mcq_generation_status())
    
    async def disconnect(self, close_code):
        # Leave session group
        await self.channel_layer.group_discard(
            self.session_group_name,
            self.channel_name
        )
    
    async def receive(self, text_data):
        data = json.loads(text_data)
        message_type = data.get('type')
        
        if message_type == 'check_status':
            await self.check_mcq_generation_status()
    
    async def check_mcq_generation_status(self):
        """Check if MCQ generation is complete and notify client"""
        max_checks = 30  # Maximum 30 checks (1 minute)
        check_count = 0
        
        while check_count < max_checks:
            session = await self.get_session()
            if not session:
                break
                
            if session.status == 'mcq_generation':
                # Check if MCQs have been generated
                mcq_set = await self.get_mcq_set_for_problem(session.problem_id)
                if mcq_set:
                    # Update session status
                    await self.update_session_status(session.id, 'mcq_ready', mcq_set.id)
                    
                    # Notify client
                    await self.send(text_data=json.dumps({
                        'type': 'mcq_ready',
                        'message': 'MCQs are ready!',
                        'total_mcqs': await self.get_mcq_count(mcq_set.id)
                    }))
                    break
            else:
                break
            
            check_count += 1
            # Wait before checking again
            await asyncio.sleep(2)
    
    @database_sync_to_async
    def get_session(self):
        try:
            return LearningSession.objects.get(id=self.session_id)
        except LearningSession.DoesNotExist:
            return None
    
    @database_sync_to_async
    def get_mcq_set_for_problem(self, problem_id):
        try:
            return MCQSet.objects.filter(
                problem_id=problem_id, 
                is_active=True
            ).latest('generated_at')
        except MCQSet.DoesNotExist:
            return None
    
    @database_sync_to_async
    def get_mcq_count(self, mcq_set_id):
        try:
            mcq_set = MCQSet.objects.get(id=mcq_set_id)
            return mcq_set.questions.count()
        except MCQSet.DoesNotExist:
            return 0
    
    @database_sync_to_async
    def update_session_status(self, session_id, status, mcq_set_id=None):
        session = LearningSession.objects.get(id=session_id)
        session.status = status
        if mcq_set_id:
            session.mcq_set_id = mcq_set_id
            # Count total MCQs
            session.total_mcqs = session.mcq_set.questions.count()
        session.save()
        return session



# ===== learning_sessions/routing.py =====
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/learning-session/(?P<session_id>\d+)/$', consumers.LearningSessionConsumer.as_asgi()),
]


<!-- c:\Users\ASUS\django-project\theme\templates\base.html -->
{% load static tailwind_tags %}
<!DOCTYPE html>
<html lang="en">
    <head>
    <title>Django Tailwind</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        {% tailwind_css %}
    </head>

    <body class="bg-gray-50 font-serif leading-normal tracking-normal">
        <div class="container mx-auto">
            <section class="flex items-center justify-center h-screen">
                <h1 class="text-5xl">Django + Tailwind = â¤ï¸</h1>
            </section>
        </div>
    </body>
</html>





<!-- c:\Users\ASUS\django-project\templates\login.html -->
{% load static tailwind_tags %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Log in</title>
  {% tailwind_css %}
</head>
<body class="min-h-screen flex items-center justify-center bg-gray-100">

  <div class="w-full max-w-md bg-white rounded shadow p-8">
    <h1 class="text-2xl font-bold text-center mb-6">Sign in</h1>

    <!-- Either identifier may be filled; the JS below enforces that rule -->
    <form id="loginForm" class="space-y-4">
      <div>
        <label class="block text-sm font-medium mb-1">Username (optional)</label>
        <input name="username" type="text"
               class="w-full rounded border px-3 py-2 focus:ring focus:border-blue-400" />
      </div>

      <div>
        <label class="block text-sm font-medium mb-1">E-mail (optional)</label>
        <input name="email" type="email"
               class="w-full rounded border px-3 py-2 focus:ring focus:border-blue-400" />
      </div>

      <div>
        <label class="block text-sm font-medium mb-1">Password</label>
        <input name="password" type="password" required
               class="w-full rounded border px-3 py-2 focus:ring focus:border-blue-400" />
      </div>

      <button type="submit"
              class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded">
        Log in
      </button>
    </form>

    <p id="error"
       class="hidden mt-4 text-center text-red-600"></p>
  </div>

<script>
const form  = document.getElementById('loginForm');
const errEl = document.getElementById('error');

form.addEventListener('submit', async (e) => {
  e.preventDefault();

  const formData = new FormData(form);
  const username = formData.get('username');
  const email = formData.get('email');
  const password = formData.get('password');

  // Validate: at least one identifier must be provided
  if (!username && !email) {
    errEl.textContent = "Please provide either username or email";
    errEl.classList.remove('hidden');
    return;
  }

  // Prepare payload
  const payload = { password };
  if (username) payload.username = username;
  if (email) payload.email = email;

  try {
    const response = await fetch('/api/auth/login/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    const data = await response.json();

    if (!response.ok) {
      // Show error from server or a generic message
      const errorMsg = data.non_field_errors?.[0] || "Login failed";
      errEl.textContent = errorMsg;
      errEl.classList.remove('hidden');
      return;
    }

    // Success! Store token and redirect
    localStorage.setItem('authToken', data.access_token);
    window.location.href = '/dashboard/';
  } catch (error) {
    console.error('Login error:', error);
    errEl.textContent = "Network error. Please try again.";
    errEl.classList.remove('hidden');
  }
});
</script>
</body>
</html>


<!-- c:\Users\ASUS\django-project\templates\signup.html -->
{% load static tailwind_tags %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Sign up</title>
  {% tailwind_css %}
</head>
<body class="min-h-screen flex items-center justify-center bg-gray-100">

  <div class="w-full max-w-md bg-white rounded shadow p-8">
    <h1 class="text-2xl font-bold text-center mb-6">Create account</h1>

    <form id="signupForm" class="space-y-4">
      <div>
        <label class="block text-sm font-medium mb-1">Username</label>
        <input name="username" type="text" required
               class="w-full rounded border px-3 py-2 focus:ring focus:border-blue-400" />
      </div>

      <div>
        <label class="block text-sm font-medium mb-1">E-mail</label>
        <input name="email" type="email" required
               class="w-full rounded border px-3 py-2 focus:ring focus:border-blue-400" />
      </div>

      <div>
        <label class="block text-sm font-medium mb-1">Password</label>
        <input name="password1" type="password" required
               class="w-full rounded border px-3 py-2 focus:ring focus:border-blue-400" />
      </div>

      <div>
        <label class="block text-sm font-medium mb-1">Confirm password</label>
        <input name="password2" type="password" required
               class="w-full rounded border px-3 py-2 focus:ring focus:border-blue-400" />
      </div>

      <button type="submit"
              class="w-full bg-green-600 hover:bg-green-700 text-white py-2 rounded">
        Sign up
      </button>
    </form>

    <p id="error"
       class="hidden mt-4 text-center text-red-600"></p>
    <p class="mt-4 text-center text-sm">
      Already have an account?
      <a href="/" class="text-blue-600 hover:underline">Log in</a>
    </p>
  </div>

<script>
const form  = document.getElementById('signupForm');
const errEl = document.getElementById('error');

form.addEventListener('submit', async (e) => {
  e.preventDefault();

  const formData = new FormData(form);
  const username = formData.get('username');
  const email = formData.get('email');
  const password1 = formData.get('password1');
  const password2 = formData.get('password2');

  // Basic validation
  if (password1 !== password2) {
    errEl.textContent = "Passwords don't match";
    errEl.classList.remove('hidden');
    return;
  }

  try {
    const response = await fetch('/api/auth/registration/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        username,
        email,
        password1,
        password2,
      }),
    });

    const data = await response.json();

    if (!response.ok) {
      // Show first error from each field or a generic message
      let errorMsg = "Registration failed";
      
      if (data.email?.[0]) {
        errorMsg = `Email: ${data.email[0]}`;
      } else if (data.username?.[0]) {
        errorMsg = `Username: ${data.username[0]}`;
      } else if (data.password1?.[0]) {
        errorMsg = `Password: ${data.password1[0]}`;
      } else if (data.non_field_errors?.[0]) {
        errorMsg = data.non_field_errors[0];
      }
      
      errEl.textContent = errorMsg;
      errEl.classList.remove('hidden');
      return;
    }

    // Success! Store token and redirect
    localStorage.setItem('authToken', data.access_token);
    window.location.href = '/dashboard/';
  } catch (error) {
    console.error('Registration error:', error);
    errEl.textContent = "Network error. Please try again.";
    errEl.classList.remove('hidden');
  }
});
</script>
</body>
</html>


# templates\learning_sessions\session_interface.html



{% load static tailwind_tags %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Learning Session - {{ problem.title }}</title>
    {% tailwind_css %}
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="max-w-4xl mx-auto py-6 px-4">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">{{ problem.title }}</h1>
                    <p class="text-gray-600 mt-1">{{ problem.get_difficulty_display }} â€¢ {{ problem.get_problem_type_display }}</p>
                </div>
                <div class="text-right">
                    <div class="text-sm text-gray-500">Progress</div>
                    <div class="text-lg font-semibold text-blue-600">
                        <span id="currentStep">0</span> / <span id="totalSteps">0</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Problem Description -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-3">Problem Description</h2>
            <div class="prose max-w-none">
                <p class="text-gray-700">{{ problem.description }}</p>
                
                {% if problem.input_format %}
                <div class="mt-4">
                    <h4 class="font-medium text-gray-900">Input Format:</h4>
                    <p class="text-gray-700">{{ problem.input_format }}</p>
                </div>
                {% endif %}
                
                {% if problem.output_format %}
                <div class="mt-4">
                    <h4 class="font-medium text-gray-900">Output Format:</h4>
                    <p class="text-gray-700">{{ problem.output_format }}</p>
                </div>
                {% endif %}
                
                {% if problem.sample_input and problem.sample_output %}
                <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <h4 class="font-medium text-gray-900">Sample Input:</h4>
                        <pre class="bg-gray-100 p-3 rounded text-sm">{{ problem.sample_input }}</pre>
                    </div>
                    <div>
                        <h4 class="font-medium text-gray-900">Sample Output:</h4>
                        <pre class="bg-gray-100 p-3 rounded text-sm">{{ problem.sample_output }}</pre>
                    </div>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Learning Interface -->
        <div id="learningInterface">
            <!-- MCQ Generation Loading -->
            <div id="loadingSection" class="bg-white rounded-lg shadow-sm p-8 text-center">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Generating Learning Questions</h3>
                <p class="text-gray-600">AI is creating personalized questions to guide your learning...</p>
            </div>

            <!-- MCQ Interface -->
            <div id="mcqSection" class="hidden">
                <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">Learning Question</h3>
                        <div class="text-sm text-gray-500">
                            Time: <span id="timer" class="font-mono">00:00</span>
                        </div>
                    </div>
                    
                    <div id="mcqContent">
                        <!-- MCQ content will be loaded here -->
                    </div>
                </div>

                <!-- Answer Feedback -->
                <div id="feedbackSection" class="hidden bg-white rounded-lg shadow-sm p-6 mb-6">
                    <div id="feedbackContent">
                        <!-- Feedback will be shown here -->
                    </div>
                    <div class="mt-4 flex justify-end">
                        <button id="nextButton" onclick="nextQuestion()" 
                                class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded">
                            Next Question
                        </button>
                    </div>
                </div>
            </div>

            <!-- Solution Phase -->
            <div id="solutionSection" class="hidden">
                <div class="bg-white rounded-lg shadow-sm p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">
                        ðŸŽ‰ Great Job! Here's the Complete Solution
                    </h3>
                    <div id="solutionContent">
                        <!-- Solution will be loaded here -->
                    </div>
                    <div class="mt-6 flex justify-center">
                        <button onclick="completeLearning()" 
                                class="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded">
                            Complete Learning Session
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const sessionId = {{ session.id }};
        let currentMCQ = null;
        let startTime = null;
        let timerInterval = null;
        let socket = null;

        document.addEventListener('DOMContentLoaded', function() {
            initializeWebSocket();
            checkSessionStatus();
        });

        function initializeWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws/learning-session/${sessionId}/`;
            
            socket = new WebSocket(wsUrl);
            
            socket.onopen = function(e) {
                console.log('WebSocket connected');
                socket.send(JSON.stringify({
                    'type': 'check_status'
                }));
            };
            
            socket.onmessage = function(e) {
                const data = JSON.parse(e.data);
                if (data.type === 'mcq_ready') {
                    document.getElementById('totalSteps').textContent = data.total_mcqs || 0;
                    loadFirstMCQ();
                }
            };
            
            socket.onclose = function(e) {
                console.log('WebSocket disconnected');
            };
        }

        async function checkSessionStatus() {
            const token = localStorage.getItem('authToken');
            
            try {
                const response = await fetch(`/api/learning-sessions/${sessionId}/status/`, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                    }
                });
                
                const data = await response.json();
                
                // FIX: Use correct status names from the model
                if ((data.status === 'mcq_ready' || data.status === 'in_progress') && data.current_mcq) {
                    document.getElementById('loadingSection').classList.add('hidden');
                    document.getElementById('mcqSection').classList.remove('hidden');
                    document.getElementById('totalSteps').textContent = data.total_mcqs;
                    document.getElementById('currentStep').textContent = data.current_mcq_index + 1;
                    displayMCQ(data.current_mcq);
                } else if (data.status === 'completed') {
                    showSolutionPhase();
                }
                
            } catch (error) {
                console.error('Error checking session status:', error);
            }
        }

        async function loadFirstMCQ() {
            document.getElementById('loadingSection').classList.add('hidden');
            document.getElementById('mcqSection').classList.remove('hidden');
            await checkSessionStatus();
        }

        function displayMCQ(mcq) {
            currentMCQ = mcq;
            startTime = Date.now();
            startTimer();
            
            const mcqContent = document.getElementById('mcqContent');
            mcqContent.innerHTML = `
                <div class="mb-6">
                    <p class="text-gray-900 text-lg mb-6">${mcq.question_text}</p>
                    <div class="space-y-3">
                        <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
                            <input type="radio" name="answer" value="A" class="mr-3">
                            <span>A) ${mcq.option_a}</span>
                        </label>
                        <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
                            <input type="radio" name="answer" value="B" class="mr-3">
                            <span>B) ${mcq.option_b}</span>
                        </label>
                        <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
                            <input type="radio" name="answer" value="C" class="mr-3">
                            <span>C) ${mcq.option_c}</span>
                        </label>
                        <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
                            <input type="radio" name="answer" value="D" class="mr-3">
                            <span>D) ${mcq.option_d}</span>
                        </label>
                    </div>
                    ${mcq.hint_text ? `
                        <div class="mt-4 p-3 bg-blue-50 border-l-4 border-blue-400">
                            <p class="text-sm text-blue-700"><strong>ðŸ’¡ Hint:</strong> ${mcq.hint_text}</p>
                        </div>
                    ` : ''}
                    <div class="mt-6 flex justify-end">
                        <button onclick="submitAnswer()" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded">
                            Submit Answer
                        </button>
                    </div>
                </div>
            `;
        }

        function startTimer() {
            let seconds = 0;
            timerInterval = setInterval(() => {
                seconds++;
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = seconds % 60;
                document.getElementById('timer').textContent = 
                    `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
            }, 1000);
        }

        function stopTimer() {
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
        }

        async function submitAnswer() {
            const selectedAnswer = document.querySelector('input[name="answer"]:checked');
            if (!selectedAnswer) {
                alert('Please select an answer');
                return;
            }

            const timeTaken = Math.floor((Date.now() - startTime) / 1000);
            stopTimer();

            const token = localStorage.getItem('authToken');
            
            try {
                const response = await fetch(`/api/learning-sessions/${sessionId}/submit-answer/`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        selected_answer: selectedAnswer.value,
                        time_taken_seconds: timeTaken
                    })
                });
                
                const data = await response.json();
                showFeedback(data);
                
            } catch (error) {
                console.error('Error submitting answer:', error);
                alert('Failed to submit answer. Please try again.');
            }
        }

        function showFeedback(data) {
            const feedbackContent = document.getElementById('feedbackContent');
            const isCorrect = data.is_correct;
            
            feedbackContent.innerHTML = `
                <div class="flex items-start space-x-3">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 rounded-full flex items-center justify-center ${
                            isCorrect ? 'bg-green-100' : 'bg-red-100'
                        }">
                            <span class="text-lg">${isCorrect ? 'âœ“' : 'âœ—'}</span>
                        </div>
                    </div>
                    <div class="flex-1">
                        <h4 class="text-lg font-medium ${isCorrect ? 'text-green-900' : 'text-red-900'} mb-2">
                            ${isCorrect ? 'Correct!' : 'Not quite right'}
                        </h4>
                        <p class="text-gray-700 mb-3">${data.explanation}</p>
                        <div class="text-sm text-gray-600">
                            <p>Correct answer: <strong>${data.correct_answer}</strong></p>
                            <p>Current accuracy: <strong>${data.current_accuracy.toFixed(1)}%</strong></p>
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById('feedbackSection').classList.remove('hidden');
            
            if (data.session_complete) {
                document.getElementById('nextButton').textContent = 'View Solution';
                document.getElementById('nextButton').onclick = showSolutionPhase;
            }
        }

        function nextQuestion() {
            document.getElementById('feedbackSection').classList.add('hidden');
            
            // Update progress
            const currentStep = parseInt(document.getElementById('currentStep').textContent);
            document.getElementById('currentStep').textContent = currentStep + 1;
            
            // Load next MCQ
            checkSessionStatus();
        }

        function showSolutionPhase() {
            document.getElementById('mcqSection').classList.add('hidden');
            document.getElementById('feedbackSection').classList.add('hidden');
            document.getElementById('solutionSection').classList.remove('hidden');
            
            // Here you would load the actual solution
            document.getElementById('solutionContent').innerHTML = `
                <div class="prose max-w-none">
                    <p class="text-gray-700 mb-4">
                        Congratulations on completing the learning questions! You've developed a strong understanding 
                        of the problem-solving approach.
                    </p>
                    <p class="text-gray-700 mb-4">
                        <strong>Solution approach:</strong> [Detailed solution would be generated here based on the problem type]
                    </p>
                    <div class="bg-gray-100 p-4 rounded">
                        <pre class="text-sm"><code>// Complete solution code would be shown here</code></pre>
                    </div>
                </div>
            `;
        }

        async function completeLearning() {
            const token = localStorage.getItem('authToken');
            
            try {
                await fetch(`/api/learning-sessions/${sessionId}/complete/`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                    }
                });
                
                alert('Learning session completed successfully!');
                window.location.href = '/dashboard/';
                
            } catch (error) {
                console.error('Error completing session:', error);
                alert('Failed to complete session, but your progress is saved.');
                window.location.href = '/dashboard/';
            }
        }
    </script>
</body>
</html>




# problems\templates\problems\problem_detail.html



{% extends 'base.html' %}

{% block title %}{{ problem.title }} - EdPlatform{% endblock %}

{% block extra_head %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/material-darker.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/clike/clike.min.js"></script>
{% endblock %}


{% block content %}
<div class="max-w-7xl mx-auto py-8 px-4 grid grid-cols-1 lg:grid-cols-2 gap-8">

    <div class="bg-white rounded-lg shadow p-6">
        <div class="flex justify-between items-start mb-4">
            <h1 class="text-3xl font-bold text-gray-900">{{ problem.title }}</h1>
            <span class="px-3 py-1 text-sm font-semibold rounded-full 
                         {% if problem.difficulty == 'easy' %} bg-green-100 text-green-800 
                         {% elif problem.difficulty == 'medium' %} bg-yellow-100 text-yellow-800 
                         {% else %} bg-red-100 text-red-800 {% endif %}">
                {{ problem.get_difficulty_display }}
            </span>
        </div>
        
        <div class="prose max-w-none text-gray-700">
            {{ problem.description|linebreaks }}
        </div>

        {% if problem.sample_input %}
        <div class="mt-6">
            <h3 class="font-semibold text-lg mb-2">Sample Case</h3>
            <div class="grid grid-cols-2 gap-4 font-mono text-sm">
                <div class="bg-gray-50 p-3 rounded">
                    <h4 class="font-bold text-gray-600 mb-2">Input:</h4>
                    <pre>{{ problem.sample_input }}</pre>
                </div>
                <div class="bg-gray-50 p-3 rounded">
                    <h4 class="font-bold text-gray-600 mb-2">Output:</h4>
                    <pre>{{ problem.sample_output }}</pre>
                </div>
            </div>
        </div>
        {% endif %}

        <div class="mt-6 border-t pt-4">
            <a href="{% url 'problems:problem_list' %}" class="text-blue-600 hover:underline">
                &larr; Back to All Problems
            </a>
        </div>
    </div>

    <div>
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-2xl font-bold text-gray-900 mb-4">Submit Your Solution</h2>
            
            <form method="post">
                {% csrf_token %}
                
                {{ form.problem.as_hidden }}

                <div class="mb-4">
                    <label for="id_language" class="block text-sm font-medium text-gray-700 mb-2">Language</label>
                    {{ form.language }}
                </div>
                
                <div class="mb-4">
                    <label for="id_code" class="block text-sm font-medium text-gray-700 mb-2">Your Code</label>
                    {{ form.code }}
                </div>

                <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg">
                    Submit Code
                </button>
            </form>
        </div>

        {% if submission %}
        <div class="mt-8 bg-white rounded-lg shadow p-6">
            <h2 class="text-2xl font-bold text-gray-900 mb-4">Submission Result</h2>
            <div class="space-y-3">
                <p><strong>Status:</strong> <span class="font-semibold 
                    {% if submission.status == 'ACCEPTED' %} text-green-600 
                    {% else %} text-red-600 {% endif %}">{{ submission.get_status_display }}</span></p>
                <p><strong>Score:</strong> {{ submission.score|floatformat:2 }}%</p>
                <p><strong>Tests Passed:</strong> {{ submission.passed_test_cases }} / {{ submission.total_test_cases }}</p>
                {% if submission.error_data %}
                    <div class="bg-red-50 p-3 rounded-lg font-mono text-sm text-red-700">
                        <strong>Error:</strong>
                        <pre>{{ submission.error_data }}</pre>
                    </div>
                {% endif %}
            </div>
        </div>
        {% endif %}
    </div>
</div>

<script>
    // Initialize CodeMirror on the textarea
    var codeEditor = CodeMirror.fromTextArea(document.getElementById("id_code"), {
        lineNumbers: true,
        mode: "python", // Default mode
        theme: "material-darker",
        indentUnit: 4
    });

    // Change editor mode based on language selection
    var languageSelect = document.getElementById("id_language");
    languageSelect.addEventListener("change", function() {
        var mode = this.value;
        if (mode === 'cpp' || mode === 'java') {
            mode = 'text/x-c++src';
        }
        codeEditor.setOption("mode", mode);
    });
</script>
{% endblock %}



# problems\templates\problems\problem_list.html



{% load static %}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Problems Library â€“ DSA Tutor</title>

    <!-- Tailwind (django-tailwind injects its own build; CDN fallback while developing) -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Custom animations / utilities -->
    <style>
      /* Floating blob reused from dashboard.html */
      .blob {
        clip-path: polygon(
          59% 0%, 84% 13%, 100% 42%, 91% 72%,
          70% 100%, 40% 95%, 12% 82%, 0% 55%,
          6% 26%, 25% 8%
        );
      }
      /* Scroll-fade for long lists */
      .mask-gradient {
        mask-image: linear-gradient(to bottom,
                                    transparent,
                                    black 10%,
                                    black 90%,
                                    transparent 100%);
      }
    </style>
  </head>

  <body class="min-h-screen bg-slate-950 font-inter text-white selection:bg-fuchsia-500/70 selection:text-slate-100">

    <!-- Decorative gradient background -->
    <div class="fixed inset-0 -z-10 overflow-hidden">
      <div
        class="blob absolute -top-32 right-1/2 h-[42rem] w-[42rem] translate-x-1/2
               bg-gradient-to-tr from-fuchsia-600 via-indigo-600 to-sky-500
               opacity-25 blur-3xl animate-[spin_60s_linear_infinite]">
      </div>
    </div>

    <!-- NAVBAR (same as dashboard) -->
    <header class="relative z-20">
      <nav class="mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8">
        <a href="/" class="flex items-center gap-2 text-xl font-extrabold tracking-tight">
          <img src="{% static 'logo.svg' %}" alt="logo" class="h-8 w-8">
          <span class="sr-only">DSA Tutor</span>
        </a>
    
        <ul class="hidden md:flex items-center gap-8 text-sm font-medium">
          <li><a href="{% url 'problems:problem_list' %}" class="hover:text-fuchsia-400 transition">Problems</a></li>
          <li><a href="{% url 'blog_post_list' %}" class="hover:text-fuchsia-400 transition">Blogs</a></li>
        </ul>
    
        <div class="flex items-center gap-4">
          <a href="{% url 'dashboard' %}" class="text-sm hover:text-fuchsia-400">Dashboard</a>
          <a href="{% url 'problems:problem_list' %}" class="text-sm hover:text-fuchsia-400">Problems</a>
          <a href="{% url 'blog_post_list' %}" class="text-sm hover:text-fuchsia-400">Blog</a>
    
          <!-- LOG-OUT (POST) -->
          <form action="{% url 'logout' %}" method="post" class="inline">
            {% csrf_token %}
            <button type="submit" class="text-sm hover:text-fuchsia-400">
              Logout
            </button>
          </form>
        </div>
      </nav>
    </header>

    <!-- MAIN CONTENT -->
    <main class="mx-auto max-w-7xl px-6 lg:px-8 py-16 space-y-20">

      <!-- Hero Section -->
      <section class="relative isolate overflow-hidden rounded-3xl bg-slate-900/40 backdrop-blur-md border border-slate-800 p-10">
        <h1 class="text-3xl sm:text-4xl font-extrabold tracking-tight">
          <span class="bg-gradient-to-r from-fuchsia-500 to-sky-500 bg-clip-text text-transparent">
            Problems Library
          </span>
        </h1>
        <p class="mt-4 max-w-2xl text-lg text-slate-400">
          Sharpen your skills. Browse our collection of problems or filter to find the perfect challenge.
        </p>

        <!-- Glow -->
        <div class="pointer-events-none absolute inset-0 -z-10 rounded-3xl
                    bg-gradient-to-r from-fuchsia-600/20 via-indigo-600/20 to-sky-500/20 blur-3xl"></div>
      </section>

      <!-- Filters Section -->
      <section class="relative isolate rounded-3xl bg-slate-900/40 backdrop-blur-md border border-slate-800 p-6 sm:p-8">
        <form method="get" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 items-end">
          
          <div class="lg:col-span-2">
            <label for="search" class="block text-sm font-medium text-slate-300 mb-2">Search</label>
            <input type="text" 
                   name="search" 
                   id="search" 
                   value="{{ search_query }}"
                   placeholder="Search by title or keyword..."
                   class="w-full bg-slate-800/60 border border-slate-700 rounded-lg py-2 px-4 focus:ring-2 focus:ring-fuchsia-500 focus:border-fuchsia-500 transition">
          </div>

          <div>
            <label for="difficulty" class="block text-sm font-medium text-slate-300 mb-2">Difficulty</label>
            <select name="difficulty" id="difficulty" class="w-full bg-slate-800/60 border border-slate-700 rounded-lg py-2 px-4 focus:ring-2 focus:ring-fuchsia-500 focus:border-fuchsia-500 transition">
              <option value="">All Levels</option>
              <option value="Easy" {% if difficulty_filter == 'Easy' %}selected{% endif %}>Easy</option>
              <option value="Medium" {% if difficulty_filter == 'Medium' %}selected{% endif %}>Medium</option>
              <option value="Hard" {% if difficulty_filter == 'Hard' %}selected{% endif %}>Hard</option>
            </select>
          </div>

          <div>
            <button type="submit" class="w-full rounded-md bg-gradient-to-r from-fuchsia-600 to-indigo-600 px-4 py-2 text-sm font-semibold shadow-lg shadow-fuchsia-600/30 hover:shadow-fuchsia-600/50 transition">
              Apply Filters
            </button>
          </div>
        </form>

        {% if search_query or difficulty_filter %}
          <div class="mt-6 pt-4 border-t border-slate-800 flex flex-wrap items-center gap-3 text-sm">
            <span class="text-slate-400">Active filters:</span>
            {% if search_query %}
              <span class="inline-flex items-center px-3 py-1 rounded-full bg-slate-800 text-sky-300">
                "{{ search_query }}"
              </span>
            {% endif %}
            {% if difficulty_filter %}
              <span class="inline-flex items-center px-3 py-1 rounded-full bg-slate-800 text-sky-300">
                {{ difficulty_filter }}
              </span>
            {% endif %}
            <a href="{% url 'problems:problem_list' %}" class="text-slate-500 hover:text-fuchsia-400 underline transition">
              Clear all
            </a>
          </div>
        {% endif %}
      </section>

      <!-- Problems Grid -->
      <section class="space-y-6">
        <div class="flex items-baseline justify-between">
          <h2 class="text-2xl font-bold">
            {% if page_obj.paginator.count > 0 %}
              {{ page_obj.paginator.count }} Problem{{ page_obj.paginator.count|pluralize }}
            {% else %}
              Problems
            {% endif %}
          </h2>
          <a href="{% url 'problems:problem_create' %}"
             class="rounded-md bg-gradient-to-r from-fuchsia-600 to-indigo-600 px-4 py-2 text-sm font-semibold
                    shadow-lg shadow-fuchsia-600/30 hover:shadow-fuchsia-600/50 transition">
            + New Problem
          </a>
        </div>

        {% if page_obj %}
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {% for problem in page_obj %}
              <div class="group relative rounded-2xl bg-slate-900/40 p-6 border border-slate-800 backdrop-blur-md shadow-md hover:-translate-y-1 hover:shadow-xl transition flex flex-col">
                <a href="{% url 'problems:problem_detail' problem.pk %}" class="absolute inset-0 z-0"></a>
                
                <div class="flex-grow">
                  <div class="flex items-start justify-between">
                    <h3 class="text-lg font-semibold pr-4">{{ problem.title }}</h3>
                    <span class="flex-shrink-0 rounded-full px-3 py-1 text-xs font-medium border
                      {% if problem.difficulty == 'Easy'   %}border-emerald-500 text-emerald-400{% endif %}
                      {% if problem.difficulty == 'Medium' %}border-amber-500   text-amber-400  {% endif %}
                      {% if problem.difficulty == 'Hard'   %}border-rose-600     text-rose-400   {% endif %}">
                      {{ problem.difficulty }}
                    </span>
                  </div>
                  <p class="mt-2 text-sm text-slate-400 line-clamp-3">
                    {{ problem.description|default:"No description provided."|truncatewords:20 }}
                  </p>
                </div>

                <!-- Progress bar (matching dashboard style) -->
                <div class="mt-4">
                  <div class="flex items-center justify-between text-xs text-slate-500 mb-2">
                    <span>Success Rate</span>
                    <span>{{ problem.success_rate|default:0 }}%</span>
                  </div>
                  <div class="h-2 w-full rounded-full bg-slate-800 overflow-hidden">
                    <div class="h-full rounded-full bg-gradient-to-r from-fuchsia-600 to-indigo-600 transition-all duration-500"
                         style="width: {{ problem.success_rate|default:0 }}%"></div>
                  </div>
                </div>

                <!-- Subtle hover glow -->
                <span class="pointer-events-none absolute inset-0 rounded-2xl
                             bg-gradient-to-r from-fuchsia-600/10 to-indigo-600/10 opacity-0
                             group-hover:opacity-100 transition z-0"></span>
              </div>
            {% endfor %}
          </div>

          <!-- Pagination -->
          {% if page_obj.has_other_pages %}
            <nav class="flex items-center justify-center gap-4 text-sm font-medium text-slate-400 pt-8">
              {% if page_obj.has_previous %}
                <a href="?page={{ page_obj.previous_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if difficulty_filter %}&difficulty={{ difficulty_filter }}{% endif %}"
                   class="px-4 py-2 rounded-lg bg-slate-800/60 border border-slate-700 hover:border-fuchsia-500 hover:text-white transition">
                  &larr; Previous
                </a>
              {% endif %}
              
              <span class="text-slate-500">
                Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}
              </span>

              {% if page_obj.has_next %}
                <a href="?page={{ page_obj.next_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if difficulty_filter %}&difficulty={{ difficulty_filter }}{% endif %}"
                   class="px-4 py-2 rounded-lg bg-slate-800/60 border border-slate-700 hover:border-fuchsia-500 hover:text-white transition">
                  Next &rarr;
                </a>
              {% endif %}
            </nav>
          {% endif %}

        {% else %}
          <!-- Empty state -->
          <div class="relative isolate overflow-hidden rounded-3xl bg-slate-900/40 backdrop-blur-md border border-slate-800 p-16 text-center">
            <h3 class="text-2xl font-bold">No Problems Found</h3>
            <p class="text-slate-400 mt-2 max-w-md mx-auto">
              {% if search_query or difficulty_filter %}
                Try adjusting your filters or be the first to create a problem like this!
              {% else %}
                There are no problems here yet. Why not create one?
              {% endif %}
            </p>
            <a href="{% url 'problems:problem_create' %}" 
               class="mt-6 inline-block rounded-md bg-gradient-to-r from-fuchsia-600 to-indigo-600 px-5 py-2.5 text-sm font-semibold shadow-lg shadow-fuchsia-600/30 hover:shadow-fuchsia-600/50 transition">
              + Create New Problem
            </a>

            <!-- Glow -->
            <div class="pointer-events-none absolute inset-0 -z-10 rounded-3xl
                        bg-gradient-to-r from-fuchsia-600/10 via-indigo-600/10 to-sky-500/10 blur-3xl"></div>
          </div>
        {% endif %}
      </section>

    </main>

    <!-- FOOTER (same as dashboard) -->
    <footer class="border-t border-slate-800 py-10 text-sm">
      <div class="mx-auto max-w-7xl px-6 lg:px-8 flex flex-col md:flex-row items-center justify-between gap-6">
        <p class="text-slate-500">&copy; {{ now|date:"Y" }} DSA Tutor. All rights reserved.</p>
        <ul class="flex gap-6">
          <li><a href="#" class="hover:text-fuchsia-400">Privacy</a></li>
          <li><a href="#" class="hover:text-fuchsia-400">Terms</a></li>
          <li><a href="#" class="hover:text-fuchsia-400">Contact</a></li>
        </ul>
      </div>
    </footer>

  </body>
</html>




# submit\secure_runner.py


import docker
import tempfile
import time
import json
import os
from pathlib import Path
from typing import Dict, List, Optional

class SecureCodeRunner:
    """
    Secure code execution using Docker containers with resource limits
    """
    
    def __init__(self):
        self.client = docker.from_env()
        self.base_images = {
            'cpp': 'gcc:latest',
            'python': 'python:3.11-slim',
            'java': 'openjdk:17-slim'
        }
        
    def run_code_secure(self, language: str, code: str, test_cases: List[Dict], 
                       time_limit: int = 5, memory_limit: str = "128m") -> Dict:
        """
        Execute code securely in Docker container with multiple test cases
        
        Args:
            language: Programming language (cpp, python, java)
            code: Source code to execute
            test_cases: List of {'input': str, 'expected_output': str}
            time_limit: CPU time limit in seconds
            memory_limit: Memory limit (e.g., "128m", "256m")
            
        Returns:
            Dict with execution results for all test cases
        """
        if language not in self.base_images:
            return {
                'status': 'ERROR',
                'message': f'Unsupported language: {language}',
                'test_results': []
            }
            
        try:
            # Create temporary directory for code files
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_path = Path(temp_dir)
                
                # Prepare code files
                code_file, executable = self._prepare_code_files(language, code, temp_path)
                
                # Compile if needed
                compile_result = self._compile_code(language, code_file, executable, temp_path)
                if compile_result['status'] != 'SUCCESS':
                    return compile_result
                    
                # Run test cases
                test_results = []
                overall_status = 'ACCEPTED'
                
                for i, test_case in enumerate(test_cases):
                    result = self._run_single_test(
                        language, code_file, executable, temp_path,
                        test_case, time_limit, memory_limit
                    )
                    test_results.append(result)
                    
                    if result['status'] != 'ACCEPTED':
                        overall_status = result['status']
                        
                return {
                    'status': overall_status,
                    'test_results': test_results,
                    'total_tests': len(test_cases),
                    'passed_tests': sum(1 for r in test_results if r['status'] == 'ACCEPTED')
                }
                
        except Exception as e:
            return {
                'status': 'ERROR',
                'message': f'Execution error: {str(e)}',
                'test_results': []
            }
            
    def _prepare_code_files(self, language: str, code: str, temp_path: Path):
        """Prepare source code files based on language"""
        if language == 'cpp':
            code_file = temp_path / 'solution.cpp'
            executable = temp_path / 'solution'
        elif language == 'python':
            code_file = temp_path / 'solution.py'
            executable = None
        elif language == 'java':
            code_file = temp_path / 'Main.java'
            executable = temp_path / 'Main.class'
            
        code_file.write_text(code, encoding='utf-8')
        return code_file, executable
        
    def _compile_code(self, language: str, code_file: Path, executable: Path, temp_path: Path):
        """Compile code if needed"""
        if language == 'python':
            return {'status': 'SUCCESS'}
            
        try:
            if language == 'cpp':
                compile_cmd = f'g++ -O2 -std=c++17 -o {executable.name} {code_file.name}'
            elif language == 'java':
                compile_cmd = f'javac {code_file.name}'
                
            container = self.client.containers.run(
                self.base_images[language],
                command=f'sh -c "cd /workspace && {compile_cmd}"',
                volumes={str(temp_path): {'bind': '/workspace', 'mode': 'rw'}},
                working_dir='/workspace',
                mem_limit='256m',
                cpu_period=100000,
                cpu_quota=50000,  # 50% CPU
                network_disabled=True,
                remove=True,
                detach=False,
                stdout=True,
                stderr=True
            )
            
            if container.attrs['State']['ExitCode'] != 0:
                return {
                    'status': 'COMPILATION_ERROR',
                    'message': container.decode('utf-8'),
                    'test_results': []
                }
                
            return {'status': 'SUCCESS'}
            
        except Exception as e:
            return {
                'status': 'COMPILATION_ERROR', 
                'message': f'Compilation failed: {str(e)}',
                'test_results': []
            }
            
    def _run_single_test(self, language: str, code_file: Path, executable: Path, 
                        temp_path: Path, test_case: Dict, time_limit: int, memory_limit: str):
        """Run a single test case in secure container"""
        try:
            # Prepare execution command
            if language == 'cpp':
                run_cmd = f'./{executable.name}'
            elif language == 'python':
                run_cmd = f'python3 {code_file.name}'
            elif language == 'java':
                run_cmd = 'java Main'
                
            # Create input file
            input_file = temp_path / 'input.txt'
            input_file.write_text(test_case['input'])
            
            start_time = time.time()
            
            # Run in secure container
            container = self.client.containers.run(
                self.base_images[language],
                command=f'sh -c "cd /workspace && timeout {time_limit} {run_cmd} < input.txt"',
                volumes={str(temp_path): {'bind': '/workspace', 'mode': 'rw'}},
                working_dir='/workspace',
                mem_limit=memory_limit,
                cpu_period=100000,
                cpu_quota=int(time_limit * 100000),  # CPU quota based on time limit
                network_disabled=True,
                remove=True,
                detach=False,
                stdout=True,
                stderr=True
            )
            
            execution_time = time.time() - start_time
            exit_code = container.attrs['State']['ExitCode']
            output = container.decode('utf-8').strip()
            
            # Determine status
            if exit_code == 124:  # timeout exit code
                status = 'TIME_LIMIT_EXCEEDED'
            elif exit_code != 0:
                status = 'RUNTIME_ERROR'
            elif output == test_case['expected_output'].strip():
                status = 'ACCEPTED'
            else:
                status = 'WRONG_ANSWER'
                
            return {
                'status': status,
                'input': test_case['input'],
                'expected_output': test_case['expected_output'],
                'actual_output': output,
                'execution_time': execution_time,
                'memory_used': self._get_memory_usage(container),
                'exit_code': exit_code
            }
            
        except docker.errors.ContainerError as e:
            return {
                'status': 'RUNTIME_ERROR',
                'input': test_case['input'],
                'expected_output': test_case['expected_output'],
                'actual_output': '',
                'execution_time': 0,
                'memory_used': 0,
                'exit_code': e.exit_status,
                'error': str(e)
            }
        except Exception as e:
            return {
                'status': 'ERROR',
                'input': test_case['input'],
                'expected_output': test_case['expected_output'],
                'actual_output': '',
                'execution_time': 0,
                'memory_used': 0,
                'exit_code': -1,
                'error': str(e)
            }
            
    def _get_memory_usage(self, container):
        """Get memory usage from container stats"""
        try:
            stats = container.stats(stream=False)
            return stats['memory_stats'].get('usage', 0)
        except:
            return 0


# submit\judge.py


from typing import Dict, List
from .secure_runner import SecureCodeRunner
from .models import Submission, TestCaseResult
from problems.models import TestCase
from django.db import transaction

class JudgeService:
    """Enhanced judge service with comprehensive testing"""
    
    def __init__(self):
        self.runner = SecureCodeRunner()
        
    def judge_submission(self, submission: Submission) -> Dict:
        """Judge a submission against all test cases"""
        try:
            submission.status = 'JUDGING'
            submission.save()
            
            # Get test cases
            test_cases = list(submission.problem.test_cases.all())
            if not test_cases:
                return self._create_error_result("No test cases found for this problem")
                
            # Prepare test case data
            test_data = [
                {
                    'input': tc.input_data,
                    'expected_output': tc.expected_output,
                    'test_case_obj': tc
                }
                for tc in test_cases
            ]
            
            # Run secure execution
            result = self.runner.run_code_secure(
                language=submission.language,
                code=submission.code,
                test_cases=test_data,
                time_limit=submission.problem.time_limit,
                memory_limit=submission.problem.memory_limit
            )
            
            # Process results
            return self._process_judge_result(submission, result, test_cases)
            
        except Exception as e:
            return self._create_error_result(f"Judge error: {str(e)}")
            
    def _process_judge_result(self, submission: Submission, result: Dict, test_cases: List[TestCase]) -> Dict:
        """Process and save judge results"""
        with transaction.atomic():
            # Clear existing results
            TestCaseResult.objects.filter(submission=submission).delete()
            
            total_tests = len(test_cases)
            passed_tests = 0
            max_time = 0
            max_memory = 0
            
            # Save individual test results
            for i, test_result in enumerate(result['test_results']):
                test_case = test_cases[i]
                
                TestCaseResult.objects.create(
                    submission=submission,
                    test_case=test_case,
                    status=test_result['status'],
                    execution_time=test_result.get('execution_time', 0),
                    memory_used=test_result.get('memory_used', 0),
                    actual_output=test_result.get('actual_output', ''),
                    error_message=test_result.get('error', '')
                )
                
                if test_result['status'] == 'ACCEPTED':
                    passed_tests += 1
                    
                max_time = max(max_time, test_result.get('execution_time', 0))
                max_memory = max(max_memory, test_result.get('memory_used', 0))
                
            # Calculate score
            score = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
            
            # Update submission
            submission.status = result['status']
            submission.total_test_cases = total_tests
            submission.passed_test_cases = passed_tests
            submission.score = score
            submission.max_execution_time = max_time
            submission.max_memory_used = max_memory
            submission.save()
            
            return {
                'success': True,
                'status': result['status'],
                'score': score,
                'passed_tests': passed_tests,
                'total_tests': total_tests,
                'max_execution_time': max_time,
                'max_memory_used': max_memory
            }
            
    def _create_error_result(self, message: str) -> Dict:
        """Create error result"""
        return {
            'success': False,
            'error': message,
            'status': 'ERROR'
        }


# setup_docker.py fine in the root directory


#!/usr/bin/env python3
"""
Setup script for Docker-based secure code execution
"""

import docker
import sys

def setup_docker_images():
    """Pull required Docker images for secure execution"""
    client = docker.from_env()
    
    images = [
        'gcc:latest',
        'python:3.11-slim', 
        'openjdk:17-slim'
    ]
    
    print("Setting up Docker images for secure code execution...")
    
    for image in images:
        print(f"Pulling {image}...")
        try:
            client.images.pull(image)
            print(f"âœ“ Successfully pulled {image}")
        except Exception as e:
            print(f"âœ— Failed to pull {image}: {e}")
            return False
            
    print("\nâœ“ All Docker images setup complete!")
    return True

if __name__ == "__main__":
    try:
        if setup_docker_images():
            print("\nDocker setup completed successfully!")
            print("You can now use the secure code execution system.")
        else:
            print("\nDocker setup failed. Please check your Docker installation.")
            sys.exit(1)
    except Exception as e:
        print(f"Setup failed: {e}")
        sys.exit(1)


# problems\templates\problems\problem_create.html



{% extends 'base.html' %}
{% load static %}

{% block title %}Create New Problem - EdPlatform{% endblock %}

{% block extra_head %}
<!-- MathJax for math preview -->
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<script>
window.MathJax = {
  tex: {
    inlineMath: [['$', '$'], ['\\(', '\\)']],
    displayMath: [['$$', '$$'], ['\\[', '\\]']]
  },
  svg: {
    fontCache: 'global'
  }
};
</script>

<!-- CodeMirror for code editing -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/github.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/clike/clike.min.js"></script>

<style>
.form-section {
    @apply bg-white rounded-lg shadow-sm border p-6 mb-6;
}
.input-group {
    @apply space-y-2;
}
.preview-area {
    @apply bg-gray-50 border rounded-lg p-4 min-h-[100px] max-h-[300px] overflow-y-auto;
}
.tag-input {
    @apply inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800 mr-2 mb-2;
}
.file-upload-area {
    @apply border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-500 transition-colors cursor-pointer;
}
.test-case-row {
    @apply grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg mb-4;
}
</style>
{% endblock %}

{% block content %}
<div class="min-h-screen bg-gray-50 py-8">
    <div class="container mx-auto px-4">
        <div class="max-w-5xl mx-auto">
            <!-- Header -->
            <div class="mb-8">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900">Create New Problem</h1>
                        <p class="text-gray-600 mt-2">Design a problem that will challenge and educate learners</p>
                    </div>
                    <div class="flex space-x-4">
                        <button type="button" id="previewBtn" 
                                class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:ring-2 focus:ring-blue-500">
                            ðŸ‘ï¸ Preview
                        </button>
                        <button type="button" id="saveAsDraftBtn" 
                                class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 focus:ring-2 focus:ring-gray-500">
                            ðŸ“„ Save as Draft
                        </button>
                    </div>
                </div>
            </div>

            <form method="post" enctype="multipart/form-data" id="problemForm" class="space-y-6">
                {% csrf_token %}

                <!-- Problem Basic Info Section -->
                <div class="form-section">
                    <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                        ðŸ“ Basic Information
                    </h2>
                    
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <!-- Title -->
                        <div class="lg:col-span-2 input-group">
                            <label for="title" class="block text-sm font-medium text-gray-700">
                                Problem Title <span class="text-red-500">*</span>
                            </label>
                            <input type="text" name="title" id="title" required
                                   placeholder="e.g., Two Sum Problem"
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
                            <div id="titleCounter" class="text-sm text-gray-500">0/100 characters</div>
                        </div>

                        <!-- Problem Type -->
                        <div class="input-group">
                            <label for="problem_type" class="block text-sm font-medium text-gray-700">
                                Problem Type <span class="text-red-500">*</span>
                            </label>
                            <select name="problem_type" id="problem_type" required
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">Select problem type...</option>
                                <option value="math">ðŸ“ Mathematics</option>
                                <option value="dsa">ðŸ’» Data Structures & Algorithms</option>
                            </select>
                        </div>

                        <!-- Difficulty -->
                        <div class="input-group">
                            <label for="difficulty" class="block text-sm font-medium text-gray-700">
                                Difficulty Level <span class="text-red-500">*</span>
                            </label>
                            <select name="difficulty" id="difficulty" required
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">Select difficulty...</option>
                                <option value="easy">ðŸŸ¢ Easy</option>
                                <option value="medium">ðŸŸ¡ Medium</option>
                                <option value="hard">ðŸ”´ Hard</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Problem Description Section -->
                <div class="form-section">
                    <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                        ðŸ“„ Problem Description
                    </h2>
                    
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <!-- Description Editor -->
                        <div class="input-group">
                            <label for="description" class="block text-sm font-medium text-gray-700">
                                Problem Statement <span class="text-red-500">*</span>
                            </label>
                            <textarea name="description" id="description" required rows="8"
                                      placeholder="Describe the problem clearly. You can use LaTeX for math: $x^2 + y^2 = z^2$"
                                      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"></textarea>
                            <div class="flex justify-between text-sm text-gray-500">
                                <span>ðŸ’¡ Tip: Use $ for inline math, $$ for display math</span>
                                <span id="descCounter">0/2000 characters</span>
                            </div>
                        </div>

                        <!-- Live Preview -->
                        <div class="input-group">
                            <label class="block text-sm font-medium text-gray-700">
                                Live Preview
                            </label>
                            <div id="descriptionPreview" class="preview-area">
                                <p class="text-gray-500 italic">Start typing to see preview...</p>
                            </div>
                        </div>
                    </div>

                    <!-- Example Cases -->
                    <div class="mt-6 input-group">
                        <label for="examples" class="block text-sm font-medium text-gray-700">
                            Example Cases (Optional)
                        </label>
                        <div id="exampleCases">
                            <div class="example-case grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg mb-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-2">Input</label>
                                    <textarea name="example_inputs[]" rows="3" 
                                              placeholder="Example input..."
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md font-mono text-sm"></textarea>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-2">Output</label>
                                    <textarea name="example_outputs[]" rows="3" 
                                              placeholder="Expected output..."
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md font-mono text-sm"></textarea>
                                </div>
                            </div>
                        </div>
                        <button type="button" id="addExampleBtn" 
                                class="px-4 py-2 border border-blue-500 text-blue-600 rounded-md hover:bg-blue-50 focus:ring-2 focus:ring-blue-500">
                            âž• Add Another Example
                        </button>
                    </div>
                </div>

                <!-- DSA-Specific Section (Hidden by default) -->
                <div id="dsaSection" class="form-section hidden">
                    <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                        âš™ï¸ Execution Settings
                    </h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                        <div class="input-group">
                            <label for="time_limit" class="block text-sm font-medium text-gray-700">
                                Time Limit (seconds)
                            </label>
                            <input type="number" name="time_limit" id="time_limit" value="2" min="0.1" step="0.1"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div class="input-group">
                            <label for="memory_limit" class="block text-sm font-medium text-gray-700">
                                Memory Limit (MB)
                            </label>
                            <input type="number" name="memory_limit" id="memory_limit" value="256" min="1"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div class="input-group">
                            <label for="allowed_languages" class="block text-sm font-medium text-gray-700">
                                Allowed Languages
                            </label>
                            <select name="allowed_languages" id="allowed_languages" multiple
                                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                <option value="python" selected>Python</option>
                                <option value="javascript">JavaScript</option>
                                <option value="cpp">C++</option>
                                <option value="java">Java</option>
                            </select>
                        </div>
                    </div>

                    <!-- Test Cases -->
                    <div class="input-group">
                        <div class="flex justify-between items-center mb-4">
                            <label class="block text-sm font-medium text-gray-700">
                                Test Cases <span class="text-red-500">*</span>
                            </label>
                            <button type="button" id="addTestCaseBtn" 
                                    class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:ring-2 focus:ring-green-500">
                                âž• Add Test Case
                            </button>
                        </div>
                        <div id="testCases">
                            <!-- Test cases will be added here dynamically -->
                        </div>
                    </div>
                </div>

                <!-- Tags & Categories -->
                <div class="form-section">
                    <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                        ðŸ·ï¸ Tags & Categorization
                    </h2>
                    
                    <div class="input-group">
                        <label for="tagsInput" class="block text-sm font-medium text-gray-700">
                            Tags (press Enter to add)
                        </label>
                        <input type="text" id="tagsInput" placeholder="e.g., arrays, sorting, binary-search"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <input type="hidden" name="tags" id="tagsHidden">
                        <div id="tagsList" class="mt-3 min-h-[50px]">
                            <!-- Tags will appear here -->
                        </div>
                    </div>
                </div>

                <!-- File Upload Section -->
                <div class="form-section">
                    <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                        ðŸ“Ž Attachments
                    </h2>
                    
                    <div class="input-group">
                        <div class="file-upload-area" id="fileUploadArea">
                            <input type="file" name="problem_file" id="problem_file" 
                                   accept=".pdf,.png,.jpg,.jpeg,.txt,.md" class="hidden" multiple>
                            <div class="flex flex-col items-center">
                                <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                </svg>
                                <p class="text-lg font-medium text-gray-900">Drop files here or click to browse</p>
                                <p class="text-sm text-gray-500 mt-2">Supports PDF, images, text files (max 10MB each)</p>
                            </div>
                        </div>
                        <div id="filesList" class="mt-4 space-y-2">
                            <!-- Uploaded files will appear here -->
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                    <a href="{% url 'problems:problem_list' %}" 
                       class="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 transition-colors">
                        Cancel
                    </a>
                    <button type="button" id="validateBtn" 
                            class="px-6 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 focus:ring-2 focus:ring-yellow-500 transition-colors">
                        ðŸ” Validate & Test
                    </button>
                    <button type="submit" 
                            class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                        ðŸš€ Create Problem
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
<div id="notifications" class="fixed top-4 right-4 z-50 space-y-2">
    <!-- Messages will appear here -->
</div>

<!-- Preview Modal -->
<div id="previewModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6 border-b border-gray-200">
                <div class="flex justify-between items-center">
                    <h3 class="text-xl font-semibold">Problem Preview</h3>
                    <button id="closePreviewBtn" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <div id="previewContent" class="p-6">
                <!-- Preview content will be generated here -->
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize components
    initializeTagSystem();
    initializeFileUpload();
    initializeLivePreview();
    initializeFormValidation();
    initializeProblemTypeToggle();
    initializeTestCases();
    initializeModal();
    initializeCharacterCounters();
});

// Tag System
function initializeTagSystem() {
    const tagsInput = document.getElementById('tagsInput');
    const tagsList = document.getElementById('tagsList');
    const tagsHidden = document.getElementById('tagsHidden');
    let tags = [];

    tagsInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const tag = this.value.trim().toLowerCase();
            if (tag && !tags.includes(tag)) {
                tags.push(tag);
                updateTagsDisplay();
                this.value = '';
            }
        }
    });

    function updateTagsDisplay() {
        tagsList.innerHTML = tags.map(tag => `
            <span class="tag-input">
                ${tag}
                <button type="button" onclick="removeTag('${tag}')" class="ml-2 text-blue-600 hover:text-blue-800">Ã—</button>
            </span>
        `).join('');
        tagsHidden.value = tags.join(',');
    }

    window.removeTag = function(tagToRemove) {
        tags = tags.filter(tag => tag !== tagToRemove);
        updateTagsDisplay();
    };
}

// File Upload System
function initializeFileUpload() {
    const fileUploadArea = document.getElementById('fileUploadArea');
    const fileInput = document.getElementById('problem_file');
    const filesList = document.getElementById('filesList');

    fileUploadArea.addEventListener('click', () => fileInput.click());
    
    fileUploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        fileUploadArea.classList.add('border-blue-500', 'bg-blue-50');
    });
    
    fileUploadArea.addEventListener('dragleave', () => {
        fileUploadArea.classList.remove('border-blue-500', 'bg-blue-50');
    });
    
    fileUploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        fileUploadArea.classList.remove('border-blue-500', 'bg-blue-50');
        const files = e.dataTransfer.files;
        handleFiles(files);
    });

    fileInput.addEventListener('change', (e) => {
        handleFiles(e.target.files);
    });

    function handleFiles(files) {
        Array.from(files).forEach(file => {
            if (file.size > 10 * 1024 * 1024) {
                showNotification('File too large: ' + file.name, 'error');
                return;
            }
            displayFile(file);
        });
    }

    function displayFile(file) {
        const fileDiv = document.createElement('div');
        fileDiv.className = 'flex items-center justify-between p-3 bg-gray-50 rounded-lg';
        fileDiv.innerHTML = `
            <div class="flex items-center">
                <span class="text-sm font-medium">${file.name}</span>
                <span class="text-xs text-gray-500 ml-2">(${(file.size / 1024).toFixed(1)} KB)</span>
            </div>
            <button type="button" class="text-red-500 hover:text-red-700" onclick="this.parentElement.remove()">
                Remove
            </button>
        `;
        filesList.appendChild(fileDiv);
    }
}

// Live Preview System
function initializeLivePreview() {
    const descriptionInput = document.getElementById('description');
    const previewDiv = document.getElementById('descriptionPreview');
    
    descriptionInput.addEventListener('input', function() {
        const text = this.value;
        if (text.trim()) {
            // Convert basic markdown and render math
            let html = text
                .replace(/\n/g, '<br>')
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/`(.*?)`/g, '<code class="bg-gray-200 px-1 rounded">$1</code>');
            
            previewDiv.innerHTML = html;
            
            // Re-render MathJax
            if (window.MathJax) {
                MathJax.typesetPromise([previewDiv]).catch((err) => console.log(err));
            }
        } else {
            previewDiv.innerHTML = '<p class="text-gray-500 italic">Start typing to see preview...</p>';
        }
    });
}

// Problem Type Toggle
function initializeProblemTypeToggle() {
    const problemTypeSelect = document.getElementById('problem_type');
    const dsaSection = document.getElementById('dsaSection');
    
    problemTypeSelect.addEventListener('change', function() {
        if (this.value === 'dsa') {
            dsaSection.classList.remove('hidden');
        } else {
            dsaSection.classList.add('hidden');
        }
    });
}

// Test Cases Management
function initializeTestCases() {
    const addTestCaseBtn = document.getElementById('addTestCaseBtn');
    const testCasesContainer = document.getElementById('testCases');
    
    addTestCaseBtn.addEventListener('click', addTestCase);
    
    // Add initial test case
    addTestCase();
}

function addTestCase() {
    const testCasesContainer = document.getElementById('testCases');
    const testCaseCount = testCasesContainer.children.length + 1;
    
    const testCaseDiv = document.createElement('div');
    testCaseDiv.className = 'test-case-row';
    testCaseDiv.innerHTML = `
        <div>
            <label class="block text-sm font-medium text-gray-600 mb-2">Input ${testCaseCount}</label>
            <textarea name="test_inputs[]" rows="3" required
                      placeholder="Test input..."
                      class="w-full px-3 py-2 border border-gray-300 rounded-md font-mono text-sm"></textarea>
        </div>
        <div>
            <label class="block text-sm font-medium text-gray-600 mb-2">Expected Output ${testCaseCount}</label>
            <textarea name="test_outputs[]" rows="3" required
                      placeholder="Expected output..."
                      class="w-full px-3 py-2 border border-gray-300 rounded-md font-mono text-sm"></textarea>
        </div>
        <div class="col-span-2 flex justify-end">
            <button type="button" onclick="this.parentElement.parentElement.remove()" 
                    class="text-red-500 hover:text-red-700 text-sm">
                ðŸ—‘ï¸ Remove Test Case
            </button>
        </div>
    `;
    testCasesContainer.appendChild(testCaseDiv);
}

// Character Counters
function initializeCharacterCounters() {
    const titleInput = document.getElementById('title');
    const titleCounter = document.getElementById('titleCounter');
    const descInput = document.getElementById('description');
    const descCounter = document.getElementById('descCounter');
    
    titleInput.addEventListener('input', function() {
        titleCounter.textContent = `${this.value.length}/100 characters`;
        if (this.value.length > 100) {
            titleCounter.classList.add('text-red-500');
        } else {
            titleCounter.classList.remove('text-red-500');
        }
    });
    
    descInput.addEventListener('input', function() {
        descCounter.textContent = `${this.value.length}/2000 characters`;
        if (this.value.length > 2000) {
            descCounter.classList.add('text-red-500');
        } else {
            descCounter.classList.remove('text-red-500');
        }
    });
}

// Form Validation
function initializeFormValidation() {
    const form = document.getElementById('problemForm');
    const validateBtn = document.getElementById('validateBtn');
    
    validateBtn.addEventListener('click', function() {
        if (validateForm()) {
            showNotification('âœ… Form validation passed!', 'success');
        }
    });
    
    form.addEventListener('submit', function(e) {
        if (!validateForm()) {
            e.preventDefault();
        }
    });
}

function validateForm() {
    let isValid = true;
    const requiredFields = ['title', 'problem_type', 'difficulty', 'description'];
    
    requiredFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (!field.value.trim()) {
            field.classList.add('border-red-500');
            showNotification(`${field.labels[0].textContent} is required`, 'error');
            isValid = false;
        } else {
            field.classList.remove('border-red-500');
        }
    });
    
    // Validate DSA-specific fields
    const problemType = document.getElementById('problem_type').value;
    if (problemType === 'dsa') {
        const testCases = document.querySelectorAll('#testCases textarea[name="test_inputs[]"]');
        if (testCases.length === 0) {
            showNotification('At least one test case is required for DSA problems', 'error');
            isValid = false;
        }
    }
    
    return isValid;
}

// Modal System
function initializeModal() {
    const previewBtn = document.getElementById('previewBtn');
    const modal = document.getElementById('previewModal');
    const closeBtn = document.getElementById('closePreviewBtn');
    
    previewBtn.addEventListener('click', showPreview);
    closeBtn.addEventListener('click', () => modal.classList.add('hidden'));
    modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.classList.add('hidden');
    });
}

function showPreview() {
    const form = document.getElementById('problemForm');
    const formData = new FormData(form);
    const previewContent = document.getElementById('previewContent');
    
    // Generate preview HTML
    const title = formData.get('title') || 'Untitled Problem';
    const description = formData.get('description') || 'No description provided';
    const difficulty = formData.get('difficulty') || 'Not specified';
    const problemType = formData.get('problem_type') || 'Not specified';
    
    previewContent.innerHTML = `
        <div class="space-y-6">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">${title}</h1>
                <div class="flex space-x-4 mt-2">
                    <span class="px-3 py-1 text-sm rounded-full ${getDifficultyColor(difficulty)}">
                        ${difficulty}
                    </span>
                    <span class="px-3 py-1 text-sm rounded-full bg-blue-100 text-blue-800">
                        ${problemType}
                    </span>
                </div>
            </div>
            <div class="prose max-w-none">
                <h3>Problem Description</h3>
                <div>${description.replace(/\n/g, '<br>')}</div>
            </div>
        </div>
    `;
    
    document.getElementById('previewModal').classList.remove('hidden');
}

function getDifficultyColor(difficulty) {
    switch(difficulty) {
        case 'easy': return 'bg-green-100 text-green-800';
        case 'medium': return 'bg-yellow-100 text-yellow-800';
        case 'hard': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
    }
}

// Notification System
function showNotification(message, type = 'info') {
    const notifications = document.getElementById('notifications');
    const notification = document.createElement('div');
    
    const colors = {
        success: 'bg-green-500',
        error: 'bg-red-500',
        warning: 'bg-yellow-500',
        info: 'bg-blue-500'
    };
    
    notification.className = `${colors[type]} text-white px-6 py-3 rounded-lg shadow-lg transform transition-transform duration-300 translate-x-full`;
    notification.textContent = message;
    
    notifications.appendChild(notification);
    
    // Animate in
    setTimeout(() => notification.classList.remove('translate-x-full'), 100);
    
    // Remove after 5 seconds
    setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}
</script>
{% endblock %}


# templates\learning_sessions\dashboard.html


{% load static %}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard â€“ DSA Tutor</title>

    <!-- Tailwind (django-tailwind injects its own build; CDN fallback while developing) -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Custom animations / utilities -->
    <style>
      /* Floating blob reused from home.html */
      .blob {
        clip-path: polygon(
          59% 0%, 84% 13%, 100% 42%, 91% 72%,
          70% 100%, 40% 95%, 12% 82%, 0% 55%,
          6% 26%, 25% 8%
        );
      }
      /* Scroll-fade for long lists */
      .mask-gradient {
        mask-image: linear-gradient(to bottom,
                                    transparent,
                                    black 10%,
                                    black 90%,
                                    transparent 100%);
      }
    </style>
  </head>

  <body class="min-h-screen bg-slate-950 font-inter text-white selection:bg-fuchsia-500/70 selection:text-slate-100">

    <!-- Decorative gradient background -->
    <div class="fixed inset-0 -z-10 overflow-hidden">
      <div
        class="blob absolute -top-32 right-1/2 h-[42rem] w-[42rem] translate-x-1/2
               bg-gradient-to-tr from-fuchsia-600 via-indigo-600 to-sky-500
               opacity-25 blur-3xl animate-[spin_60s_linear_infinite]">
      </div>
    </div>

    <!-- NAVBAR -->
    
    <header class="relative z-20">
      <nav class="mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8">
        <a href="/" class="flex items-center gap-2 text-xl font-extrabold tracking-tight">
          <img src="{% static 'logo.svg' %}" alt="logo" class="h-8 w-8">
          <span class="sr-only">DSA Tutor</span>
        </a>
    
        <ul class="hidden md:flex items-center gap-8 text-sm font-medium">
          <li><a href="{% url 'problems:problem_list' %}" class="hover:text-fuchsia-400 transition">Problems</a></li>
          <li><a href="{% url 'blog_post_list' %}" class="hover:text-fuchsia-400 transition">Blogs</a></li>
        </ul>
    
        <div class="flex items-center gap-4">
          <a href="{% url 'dashboard' %}"        class="text-sm hover:text-fuchsia-400">Dashboard</a>
          <a href="{% url 'problems:problem_list' %}"     class="text-sm hover:text-fuchsia-400">Problems</a>
          <a href="{% url 'blog_post_list' %}"   class="text-sm hover:text-fuchsia-400">Blog</a>
    
          <!-- LOG-OUT (POST) -->
          <form action="{% url 'logout' %}" method="post" class="inline">
            {% csrf_token %}
            <button type="submit" class="text-sm hover:text-fuchsia-400">
              Logout
            </button>
          </form>
        </div>
      </nav>
    </header>
    

    <!-- DASHBOARD MAIN -->
    <main class="mx-auto max-w-7xl px-6 lg:px-8 py-16 space-y-20">

      <!-- Greeting / quick stats -->
      <section class="relative isolate overflow-hidden rounded-3xl bg-slate-900/40 backdrop-blur-md border border-slate-800 p-10">
        <h1 class="text-3xl sm:text-4xl font-extrabold tracking-tight">
          Welcome back,
          <span class="bg-gradient-to-r from-fuchsia-500 to-indigo-500 bg-clip-text text-transparent">
            {{ user.first_name|default:user.username }}
          </span>!
        </h1>

        <div class="mt-8 grid gap-6 sm:grid-cols-3">
          {% comment "replace the dummy stats with real context vars" %}
          {% for label, value, color in [
              ('Problems solved', 124, 'from-green-500 to-emerald-500'),
              ('Current streak',    12, 'from-yellow-400 to-amber-500'),
              ('Ranking percentile', 'Top 5 %', 'from-sky-500 to-cyan-500')
            ] %}
            <div
              class="rounded-xl bg-slate-900/60 p-6 shadow-lg shadow-black/20
                     border border-slate-800 group hover:-translate-y-1 hover:shadow-xl transition">
              <p class="text-sm text-slate-400">{{ label }}</p>
              <p class="mt-2 text-2xl font-semibold bg-gradient-to-r {{ color }} bg-clip-text text-transparent">
                {{ value }}
              </p>
            </div>
          {% endfor %}
          {% endcomment %}
        </div>

        <!-- Glow -->
        <div class="pointer-events-none absolute inset-0 -z-10 rounded-3xl
                    bg-gradient-to-r from-fuchsia-600/20 via-indigo-600/20 to-sky-500/20 blur-3xl"></div>
      </section>

      <!-- Content split: Problems (left) / Blogs (right) -->
      <section class="grid lg:grid-cols-12 gap-12">
        <!-- Problems list -->
        <div id="problems" class="lg:col-span-8 space-y-6">
          <div class="flex items-baseline justify-between">
            <h2 class="text-2xl font-bold">Your Problems</h2>
            <a href="{% url 'problems:problem_create' %}"
               class="rounded-md bg-gradient-to-r from-fuchsia-600 to-indigo-600 px-4 py-2 text-sm font-semibold
                      shadow-lg shadow-fuchsia-600/30 hover:shadow-fuchsia-600/50 transition">
              + New Problem
            </a>
          </div>

          <!-- Scrollable list wrapper -->
          <div class="h-[28rem] overflow-y-auto pr-1 mask-gradient">
            <ul class="space-y-4">
              {% for problem in problems %}
                <li
                  class="group relative rounded-2xl bg-slate-900/40 p-6
                         border border-slate-800 backdrop-blur-md shadow-md hover:-translate-y-1
                         hover:shadow-xl transition">
                  <a href="{% url 'problem_detail' problem.id %}" class="block">
                    <div class="flex items-center justify-between">
                      <h3 class="text-lg font-semibold">{{ problem.title }}</h3>
                      <span
                        class="rounded-full px-3 py-1 text-xs font-medium
                               border
                               {% if problem.difficulty == 'Easy'   %}border-emerald-500 text-emerald-400{% endif %}
                               {% if problem.difficulty == 'Medium' %}border-amber-500   text-amber-400  {% endif %}
                               {% if problem.difficulty == 'Hard'   %}border-rose-600     text-rose-400   {% endif %}">
                        {{ problem.difficulty }}
                      </span>
                    </div>

                    <!-- Progress bar -->
                    <div class="mt-4 h-2 w-full rounded-full bg-slate-800 overflow-hidden">
                      <div
                        class="h-full rounded-full
                               bg-gradient-to-r from-fuchsia-600 to-indigo-600
                               transition-all duration-500"
                        style="width: {{ problem.completion_percent|default:0 }}%"></div>
                      </div>
                    </div>

                    <!-- Subtle hover glow -->
                    <span class="pointer-events-none absolute inset-0 rounded-2xl
                                 bg-gradient-to-r from-fuchsia-600/10 to-indigo-600/10 opacity-0
                                 group-hover:opacity-100 transition"></span>
                  </a>
                </li>
              {% empty %}
                <li class="text-sm text-slate-100">No problems yet. Create one!</li>
              {% endfor %}
            </ul>
          </div>
        </div>

        <!-- Blogs list (sticky on desktop) -->
        <aside id="blogs" class="lg:col-span-4 space-y-6 lg:sticky lg:top-28 h-fit">
          <h2 class="text-2xl font-bold">Latest Blogs</h2>

          <div class="space-y-4">
            {% for blog in blogs %}
              <article
                class="group relative flex items-start gap-4 rounded-2xl bg-slate-900/40 p-5
                       border border-slate-800 backdrop-blur-md hover:-translate-y-1
                       hover:shadow-xl transition">
                {% if blog.image %}
                  <img src="{{ blog.image.url }}" alt="{{ blog.title }}"
                       class="h-14 w-14 rounded-lg object-cover flex-none">
                {% else %}
                  <div
                    class="h-14 w-14 flex-none rounded-lg bg-gradient-to-tr
                           from-indigo-600 to-fuchsia-600/80 shadow-inner"></div>
                {% endif %}

                <div>
                  <h3 class="font-semibold leading-tight mb-1">
                    <a href="{% url 'blog_post_detail' blog.pk %}"
                       class="hover:text-fuchsia-400 transition">
                      {{ blog.title }}
                    </a>
                  </h3>
                  <p class="text-xs text-slate-400">
                    {{ blog.author }} Â· {{ blog.published_date|date:"M j, Y" }}
                  </p>
                </div>

                <svg xmlns="http://www.w3.org/2000/svg"
                     class="ml-auto h-5 w-5 text-slate-500 group-hover:text-fuchsia-400 transition"
                     fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"/>
                </svg>

                <span class="pointer-events-none absolute inset-0 rounded-2xl
                             bg-gradient-to-r from-fuchsia-600/10 to-indigo-600/10 opacity-0
                             group-hover:opacity-100 transition"></span>
              </article>
            {% empty %}
              <p class="text-sm text-slate-400">No blog posts found.</p>
            {% endfor %}
          </div>

          <a href="{% url 'blog_post_list' %}" class="inline-block mt-4 text-sm hover:text-fuchsia-400">
            View all â†’
          </a>
        </aside>
      </section>
    </main>

    <!-- FOOTER -->
    <footer class="border-t border-slate-800 py-10 text-sm">
      <div class="mx-auto max-w-7xl px-6 lg:px-8 flex flex-col md:flex-row items-center justify-between gap-6">
        <p class="text-slate-500">&copy; {{ now|date:"Y" }} DSA Tutor. All rights reserved.</p>
        <ul class="flex gap-6">
          <li><a href="#" class="hover:text-fuchsia-400">Privacy</a></li>
          <li><a href="#" class="hover:text-fuchsia-400">Terms</a></li>
          <li><a href="#" class="hover:text-fuchsia-400">Contact</a></li>
        </ul>
      </div>
    </footer>
  </body>
</html>